########################
# Testing Variables
donode=
implantip=
c2=

# Making wordlists easily accessible as variables
export dirsmall='/usr/share/wordlists/dirbuster/directory-list-2.3-small.txt'
export dirmed='/usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt'
export rockyou='/usr/share/wordlists/rockyou.txt'

### Aliases ###
alias update-rootaliases='rm -rf /root/.zsh_aliases;wget https://raw.githubusercontent.com/spyder6675/vm-setup/main/.zsh_aliases -P /root;echo -e "Updated-Aliases"'
alias update-profilealiases='rm -rf /home/kali/.zsh_aliases;wget https://raw.githubusercontent.com/spyder6675/vm-setup/main/.zsh_aliases -P /home/kali;echo -e "Updated-Aliases"'
alias szsh='source ~/.zshrc'

# Navigation
alias ll='ls -lah'
#alias ..='cd ..'
#alias ...='cd ../..'
# System etc
# alias grep='grep --color=always'
# alias grep='grep -P'
alias ls='ls --color=auto'
alias df='df -h' # 
alias x='exit' # 
alias chx='chmod +x ' 
# 
alias update='sudo apt update -y && sudo apt upgrade -y'
alias pyweb='python3 -m http.server 8080'
# alias nmap="grc nmap" 
alias my-ip='echo $(ifconfig eth0 | grep "inet " | cut -b 9- | cut -d" " -f2)'
alias int-ip='ip -br -c a'
alias ext-ip='curl http://ipecho.net/plain; echo' # Get your external IP address.
alias speedtest='curl -s https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py | python -'
alias wtr='curl wttr.in'
alias i="sudo apt install -y "
alias e="nano "
# Nessus 
alias nessus-start='/bin/systemctl start nessusd.service'
alias nessus-stop='/bin/systemctl stop nessusd.service'
alias nessus-restart='/bin/systemctl restart nessusd.service'
alias nessus-status='/bin/systemctl status nessusd.service'
#
#  SSH
alias nessus-ssh='ssh -L 8834:'$implantip':8834 root@'$implantip''  
alias go-do='ssh root@'$donode'' # Go to Do Node
alias go-implant='ssh root@'$implantip'' # Go to Implantip
# Rsync
alias sync-do='rsync -avz root@'$donode':/root/testing/'*' .'
alias sync-implant='rsync -avz root@'$implantip':/root/testing/'*' .'
# Tailscale 
alias tss='tailscale status'
alias wtss='watch -n 1 tailscale status'
alias rtss='sudo systemctl restart tailscaled.service'
# Nmap
alias nmap-scripts='ls /usr/share/nmap/scripts | grep'
#
# alias untar='tar -zxvf'
# alias tar='tar -zcvf'
alias ns='netstat -tuln'
alias psg='ps aux | grep'
alias msf='msfconsole -q'
#
# Copy to clipboard
alias clp='xclip -selection c -r'
#
# hash-check
alias hash-check='cd /opt/Responder/logs && for i in $(cat *-NTLMv2*.txt | cut -d':' -f1 | sort -u) ; do grep --no-filename "$i" *-NTLMv2*.txt | head -n1 ; done > /root/testing/sorted_unique_ntlmv2_hashes.txt ; cat /root/testing/sorted_unique_ntlmv2_hashes.txt | wc ; cd ~/testing'
#
# Responder/logs
alias copy-responderlogs='cp -r /opt/Responder/logs /root/testing/logs/responderlogs'
#
# Copy Resolve.conf
alias copy-resolvconf='cp /etc/resolv.conf /root/testing/domain-recon/resolv.conf'
# 
# Activate pyenv software 

alias go-mitm6='source /root/pyenv/mitm6/bin/activate;cd /opt/mitm6'
alias go-webclientServiceScanner='source /root/pyenv/WebclientServiceScanner/bin/activate;cd /opt/WebclientServiceScanner'
alias go-impacket='source /root/pyenv/impacket/bin/activate;cd /opt/impacket/examples/'
alias go-BloodHoundpy='source /root/pyenv/BloodHound.py/bin/activate;cd /opt/BloodHound.py'
alias go-Certipy='source /root/pyenv/Certipy/bin/activate;cd /opt/Certipy/'
# alias 'source /root/pyenv/pre2k/bin/activate;cd /opt/pre2k'

# alias go-AADInternals=
# alias go-ADCSync=
# go-Aug
# go-BloodHound.py
# go-BruteLoops
# go-CeWL
# go-Certipy
# go-Coercer
# go-CredMaster
# go-DPAT
# go-DomainPasswordSpray
# go-DonPAPI
# go-EyeWitness
# go-Go365
# go-KrbRelayUp
# go-LdapRelayScan
# go-MFASweep
# go-MSOLSpray
# go-MailSniper
# go-PCredz
# go-PKINITtools
# go-PXEThief
# go-PetitPotam
# go-PowerUpSQL
# go-SIET
# go-SIGIT
# go-SQLAutoPwn
# go-Spray365
# go-SprayingToolkit
# go-certsync
# go-ciscot7
# go-containerd
# go-dnstwist
# go-docker-python3.9
# go-eavesarp
# go-enum4linux-ng
# go-fireprox
# go-hardcidr
# go-ikeforce
# go-ike-scan
# go-impacket
# go-kerbrute
# go-krbrelayx
# go-ldeep
# go-malwoverview
# go-microsoft
# go-mitm6
# go-nessus
# go-ntlmv1-multi
# go-o365spray
# go-parsuite
# go-pre2k
# go-pr_SystemDPAPIdump
# go-pyLAPS
# go-pymeta
# go-rdp-sec-check
# go-saltstack
# go-sccmhunter
# go-ssh-audit
# go-sslscan
# go-testssl.sh
# go-usernamer
# go-winshock-test
# go-wpscan


#### Functions ####
# Install in Python Virtualenv
install_with_virtualenv() {
    REPO_NAME="$1"
    PYENV="${HOME}/pyenv"
    if [ -d "/opt/${REPO_NAME}" ]; then
        cd "/opt/${REPO_NAME}" || exit 1
        virtualenv -p python3 "${PYENV}/${REPO_NAME}"
        . "${PYENV}/${REPO_NAME}/bin/activate"
        python3 -m pip install -U wheel setuptools
        # first, ensure that requirements.txt deps are installed.
        [[ -f requirements.txt ]] && python3 -m pip install -r requirements.txt
        # python3 setup.py install is deprecated in versions >= python3.9.X
        # python3 -m pip install . will handle the setup.py file for you.
        [[ -f setup.py || -f pyproject.toml ]] && python3 -m pip install .
        deactivate
        cd - &>/dev/null || exit 1
    else
        echo -e "${REPO_NAME} does not exist."
    fi
}

# Download and Install the latest debian10 Nessus amd64
download_and_install_latest_nessus() {
    NESSUS_LATEST_URL=$(curl -s https://www.tenable.com/downloads/api/v2/pages/nessus --header 'accept: application/json' | jq -r '.releases.latest' | jq -r '.[][].file_url' | grep 'Nessus-latest-debian10_amd64.deb')
    [[ ! -d "${HOME}/executables" ]] && mkdir "${HOME}/executables"
    cd "${HOME}/executables" && wget "$NESSUS_LATEST_URL" -O "${HOME}/executables/"Nessus-latest-debian10_amd64.deb
    sudo dpkg -i Nessus-latest-debian10_amd64.deb
    cd "${HOME}"
}

# Download the latest debian10 Nessus amd64
download_latest_nessus() {
    NESSUS_LATEST_URL=$(curl -s https://www.tenable.com/downloads/api/v2/pages/nessus --header 'accept: application/json' | jq -r '.releases.latest' | jq -r '.[][].file_url' | grep 'Nessus-latest-debian10_amd64.deb')
    [[ ! -d "${HOME}/executables" ]] && mkdir "${HOME}/executables"
    wget "$NESSUS_LATEST_URL" -O "${HOME}/executables/"Nessus-latest-debian10_amd64.deb
    # sudo dpkg -i Nessus-latest-debian10_amd64.deb
    # cd "${HOME}"
}


install_apt_packages() {
    # apt packages
    # apt-get update -y && apt-get full-upgrade -y
    apt-get update -y
    apt install -y build-essential
    apt install -y dirsearch
    apt install -y dnsrecon gedit
    apt install -y dnstwist
    apt install -y eyewitness
    apt install -y feroxbuster
    apt install -y gcc
    apt install -y git
    apt install -y golang
    apt install -y grc
    apt install -y htop
    apt install -y httpx-toolkit
    apt install -y inotify-tools
    apt install -y ipcalc
    apt install -y jq
    apt install -y krb5-config
    apt install -y libffi-dev
    apt install -y libkrb5-dev
    apt install -y libpcap-dev
    apt install -y libssl-dev
    apt install -y libxml2-dev
    apt install -y libxml2-utils
    apt install -y libxslt1-dev
    apt install -y make
    apt install -y masscan
    apt install -y metasploit-framework
    apt install -y ncat
    apt install -y onesixtyone
    apt install -y pipx
    apt install -y proxychains4
    apt install -y python-dev-is-python3
    apt install -y python3
    apt install -y python3-distutils
    apt install -y python3-venv
    apt install -y python3-virtualenv
    apt install -y python3-pip
    apt install -y python3-netifaces
    apt install -y python3-twisted
    apt install -y remmina
    apt install -y remmina-plugin-rdp
    apt install -y remmina-plugin-secret
    apt install -y ripgrep
    apt install -y rlwrap
    apt install -y rsh-client
    apt install -y rsync
    apt install -y samba
    apt install -y screen
    apt install -y sendemail
    apt install -y silversearcher-ag
    apt install -y smbclient
    apt install -y smbmap
    apt install -y snmp-mibs-downloader
    apt install -y sqlmap
    apt install -y telnet
    apt install -y testssl.sh nmap
    apt install -y tftp-hpa
    apt install -y tmux
    apt install -y urlcrazy ntpsec
    apt install -y vim-nox
    apt install -y virtualenv
    apt install -y whatweb
    apt install -y leafpad
    # apt install -y 

    # Bundler Install
    gem install bundler

    # Python packages
    python3 -m pip install Cython
    python3 -m pip install python-libpcap
    python3 -m pip install netaddr
    python3 -m pip install fuzzywuzzy
    python3 -m pip install levenshtein
    python3 -m pip install pyvirtualdisplay

    # remove outdated packages
    apt-get autoremove -y

}


create_roottestingdirectories() {
    # Testing Dir
    [[ ! -d "${HOME}/testing" ]] && mkdir "${HOME}/testing"
    # Domain
    [[ ! -d "${HOME}/testing/domain-recon" ]] && mkdir "${HOME}/testing/domain-recon"
    # Logs
    [[ ! -d "${HOME}/testing/logs" ]] && mkdir "${HOME}/testing/logs"
    [[ ! -d "${HOME}/testing/logs/nmap" ]] && mkdir "${HOME}/testing/logs/nmap"
    [[ ! -d "${HOME}/testing/logs/VirusTotal" ]] && mkdir "${HOME}/testing/logs/VirusTotal"
    # Reconnaissance
    [[ ! -d "${HOME}/testing/Reconnaissance" ]] && mkdir "${HOME}/testing/Reconnaissance"
    [[ ! -d "${HOME}/testing/Reconnaissance/squatting-domains.txt" ]] && touch "${HOME}/testing/Reconnaissance/squatting-domains.txt"
    [[ ! -d "${HOME}/testing/gorecon-parsed-nessus" ]] && mkdir "${HOME}/testing/gorecon-parsed-nessus"
    # Masscan
    [[ ! -d "${HOME}/testing/masscan" ]] && mkdir "${HOME}/testing/masscan"
    [[ ! -d "${HOME}/testing/masscan/externalscope" ]] && touch "${HOME}/testing/masscan/externalscope"
    [[ ! -d "${HOME}/testing/masscan/internalscope" ]] && touch "${HOME}/testing/masscan/internalscope"

}

#


### End of Functions ### 
