########################
# Testing Variables
donode=
implantip=
c2=

# Making wordlists easily accessible as variables
export raftmediumdir='/usr/share/seclists/Discovery/Web-Content/raft-medium-directories.txt'
export raftmediumfiles='/usr/share/seclists/Discovery/Web-Content/raft-medium-files.txt'

#
export rockyou='/usr/share/wordlists/rockyou.txt'

# User Agent 
export useragent='Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:123.0) Gecko/20100101 Firefox/132.0'

### Aliases ###
# alias update-rootaliases='rm -rf /root/.zsh_aliases;wget https://raw.githubusercontent.com/spyder6675/vm-setup/main/.zsh_aliases -P /root;echo -e "Updated-Aliases"'
# alias update-profilealiases='rm -rf /home/kali/.zsh_aliases;wget https://raw.githubusercontent.com/spyder6675/vm-setup/main/.zsh_aliases -P /home/kali;echo -e "Updated-Aliases"'
alias update-alias='rm -rf ${HOME}/.zsh_aliases; wget https://raw.githubusercontent.com/spyder6675/vm-setup/main/.zsh_aliases -P ${HOME};echo -e "Updated-Aliases"'
alias szsh='source ~/.zshrc'

# Navigation
alias ll='ls -lah'
#alias ..='cd ..'
#alias ...='cd ../..'
# System etc
# alias grep='grep --color=always'
# alias grep='grep -P'
# alias ls='ls --color=auto'
alias df='df -h' # 
alias x='exit' # 
alias chx='chmod +x ' 
# 
alias upgrade='sudo apt update -y && sudo apt upgrade -y'
alias pyweb='python3 -m http.server 8080'
# alias nmap="grc nmap" 
alias my-ip='echo $(ifconfig eth0 | grep "inet " | cut -b 9- | cut -d" " -f2)'
alias int-ip='ip -br -c a'
alias ext-ip='curl http://ipecho.net/plain; echo' # Get your external IP address.
alias speedtest='curl -s https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py | python -'
alias wtr='curl wttr.in'
alias i="sudo apt install -y "
alias e="nano "
# Nessus 
alias nessus-start='/bin/systemctl start nessusd.service'
alias nessus-stop='/bin/systemctl stop nessusd.service'
alias nessus-restart='/bin/systemctl restart nessusd.service'
alias nessus-status='/bin/systemctl status nessusd.service'
#
#  SSH
alias nessus-ssh='ssh -L 8834:'$implantip':8834 root@'$implantip''  
alias go-do='ssh root@'$donode'' # Go to Do Node
alias go-implant='ssh root@'$implantip'' # Go to Implantip
# Rsync
alias sync-do='rsync -avz root@'$donode':/root/testing/'*' .'
alias sync-implant='rsync -avz root@'$implantip':/root/testing/'*' .'
alias sync-implant03='rsync -avz root@100.64.0.3:/root/testing/'*' .'
alias sync-implant04='rsync -avz root@100.64.0.4:/root/testing/'*' .'
alias sync-implant05='rsync -avz root@100.64.0.5:/root/testing/'*' .'
# Tailscale 
alias tss='tailscale status'
alias wtss='watch -n 1 tailscale status'
alias rtss='sudo systemctl restart tailscaled.service'
# Nmap
alias nmap-scripts='ls /usr/share/nmap/scripts | grep'
#
# alias untar='tar -zxvf'
# alias tar='tar -zcvf'
alias ns='netstat -tuln'
alias psg='ps aux | grep'
alias msf='msfconsole -q'
#
# Copy to clipboard
alias clp='xclip -selection c -r'
#
# hash-checks
alias hash-check-opt='cd /opt/Responder/logs && for i in $(cat *-NTLMv2*.txt | cut -d':' -f1 | sort -u) ; do grep --no-filename "$i" *-NTLMv2*.txt | head -n1 ; done > /root/testing/sorted_unique_ntlmv2_hashes.txt ; cat /root/testing/sorted_unique_ntlmv2_hashes.txt | wc ; cd ~/testing'
#
# NTLMv1
alias hash-check-ntlmv1='cd /usr/share/responder/logs && for i in $(cat *-NTLMv1*.txt | cut -d':' -f1 | sort -u) ; do grep --no-filename "$i" *-NTLMv1*.txt | head -n1 ; done > /root/testing/sorted_unique_ntlmv1_hashes.txt ; cat /root/testing/sorted_unique_ntlmv1_hashes.txt | wc ; cd ~/testing'
#
# NTLMv2
alias hash-check='cd /usr/share/responder/logs && for i in $(cat *-NTLMv2*.txt | cut -d':' -f1 | sort -u) ; do grep --no-filename "$i" *-NTLMv2*.txt | head -n1 ; done > /root/testing/sorted_unique_ntlmv2_hashes.txt ; cat /root/testing/sorted_unique_ntlmv2_hashes.txt | wc ; cd ~/testing'
#
# MSSQL 
alias hash-check-MSSQL='cd /usr/share/responder/logs && for i in $(cat *MSSQL-*.txt | cut -d':' -f1 | sort -u) ; do grep --no-filename "$i" *MSSQL-*.txt | head -n1 ; done > /root/testing/sorted_unique_MSSQL-CLEARTEXT_hashes.txt ; cat /root/testing/sorted_unique_MSSQL-CLEARTEXT_hashes.txt | wc ; cd ~/testing'
#



# Responder/logs
alias copy-responderlogs='cp -r /opt/Responder/logs /root/testing/logs/responderlogs'
#
# Copy Resolve.conf
alias copy-resolvconf='cp /etc/resolv.conf /root/testing/domain-recon/resolv.conf'
#

clone-git-repos() {
    # Repos
    # Needed for GoRecon Modules
    # [[ ! -d /opt/TODO ]] &&  git clone TODO /opt/TODO
    # [[ ! -d /opt/BloodHound.py ]] && git clone https://github.com/dirkjanm/bloodhound.py /opt/BloodHound.py
    # [[ ! -d /opt/CrackMapExec ]] && git clone https://github.com/byt3bl33d3r/CrackMapExec.git /opt/CrackMapExec
    # [[ ! -d /opt/SecLists ]] && git clone https://github.com/danielmiessler/SecLists.git /opt/SecLists
    # [[ ! -d /opt/testssl.sh ]] && git clone https://github.com/drwetter/testssl.sh.git /opt/testssl.sh
    [[ ! -d /opt/AADInternals ]] &&  git clone https://github.com/Gerenios/AADInternals.git /opt/AADInternals
    [[ ! -d /opt/ADCSync ]] && git clone https://github.com/JPG0mez/ADCSync.git /opt/ADCSync
    [[ ! -d /opt/BloodHound.py ]] && git clone https://github.com/fox-it/BloodHound.py.git /opt/BloodHound.py
    [[ ! -d /opt/BruteLoops ]] &&  git clone https://github.com/arch4ngel/BruteLoops.git /opt/BruteLoops
    [[ ! -d /opt/CeWL ]] && git clone https://github.com/digininja/CeWL.git /opt/CeWL
    [[ ! -d /opt/Certipy ]] && git clone https://github.com/ly4k/Certipy.git /opt/Certipy
    [[ ! -d /opt/Coercer ]] && git clone https://github.com/p0dalirius/Coercer.git /opt/Coercer
    [[ ! -d /opt/CredMaster ]] && git clone https://github.com/knavesec/CredMaster.git /opt/CredMaster
    [[ ! -d /opt/DPAT ]] &&  git clone https://github.com/clr2of8/DPAT.git /opt/DPAT
    [[ ! -d /opt/DomainPasswordSpray ]] &&  git clone https://github.com/dafthack/DomainPasswordSpray.git /opt/DomainPasswordSpray
    [[ ! -d /opt/DonPAPI ]] && git clone https://github.com/login-securite/DonPAPI.git /opt/DonPAPI
    [[ ! -d /opt/EyeWitness ]] && git clone https://github.com/RedSiege/EyeWitness.git /opt/EyeWitness
    [[ ! -d /opt/Go365 ]] &&  git clone https://github.com/optiv/Go365.git /opt/Go365
    [[ ! -d /opt/KrbRelayUp ]] &&  git clone https://github.com/Dec0ne/KrbRelayUp.git /opt/KrbRelayUp
    [[ ! -d /opt/LdapRelayScan ]] &&  git clone https://github.com/zyn3rgy/LdapRelayScan.git /opt/LdapRelayScan
    [[ ! -d /opt/MFASweep ]] && git clone https://github.com/dafthack/MFASweep.git /opt/MFASweep
    [[ ! -d /opt/MSOLSpray ]] && git clone https://github.com/dafthack/MSOLSpray.git /opt/MSOLSpray
    [[ ! -d /opt/MailSniper ]] &&  git clone https://github.com/dafthack/MailSniper.git /opt/MailSniper
    [[ ! -d /opt/NetExec ]] && git clone https://github.com/Pennyw0rth/NetExec.git /opt/NetExec
    [[ ! -d /opt/PCredz ]] && git clone https://github.com/lgandx/PCredz.git /opt/PCredz
    [[ ! -d /opt/PKINITtools ]] && git clone https://github.com/dirkjanm/PKINITtools.git /opt/PKINITtools
    [[ ! -d /opt/PetitPotam ]] && git clone https://github.com/topotam/PetitPotam.git /opt/PetitPotam
    [[ ! -d /opt/PlumHound ]] && git clone https://github.com/PlumHound/PlumHound.git /opt/PlumHound
    [[ ! -d /opt/PowerUpSQL ]] &&  git clone https://github.com/NetSPI/PowerUpSQL.git /opt/PowerUpSQL
    [[ ! -d /opt/Responder ]] && git clone https://github.com/lgandx/Responder.git /opt/Responder
    [[ ! -d /opt/SIGIT ]] &&  git clone https://github.com/termuxhackers-id/SIGIT.git /opt/SIGIT
    [[ ! -d /opt/SQLAutoPwn ]] &&  git clone https://github.com/Wh1t3Rh1n0/SQLAutoPwn.git /opt/SQLAutoPwn
    [[ ! -d /opt/Spray365 ]] &&  git clone https://github.com/MarkoH17/Spray365.git /opt/Spray365
    [[ ! -d /opt/SprayingToolkit ]] &&  git clone https://github.com/byt3bl33d3r/SprayingToolkit.git /opt/SprayingToolkit
    [[ ! -d /opt/WebclientServiceScanner ]] && git clone https://github.com/Hackndo/WebclientServiceScanner.git /opt/WebclientServiceScanner
    [[ ! -d /opt/certsync ]] && git clone https://github.com/zblurx/certsync.git /opt/certsync
    [[ ! -d /opt/ciscot7 ]] && git clone https://github.com/theevilbit/ciscot7.git /opt/ciscot7
    [[ ! -d /opt/dnstwist ]] && git clone https://github.com/elceef/dnstwist.git /opt/dnstwist
    [[ ! -d /opt/eavesarp ]] && git clone https://github.com/ImpostorKeanu/eavesarp.git /opt/eavesarp
    [[ ! -d /opt/enum4linux-ng ]] &&  git clone https://github.com/cddmp/enum4linux-ng.git /opt/enum4linux-ng
    [[ ! -d /opt/fireprox ]] && git clone https://github.com/ustayready/fireprox.git /opt/fireprox
    [[ ! -d /opt/gitleaks ]] && git clone https://github.com/gitleaks/gitleaks.git /opt/gitleaks
    [[ ! -d /opt/hardcidr ]] && git clone https://github.com/trustedsec/hardcidr.git /opt/hardcidr
    [[ ! -d /opt/impacket ]] && git clone https://github.com/fortra/impacket.git /opt/impacket
    [[ ! -d /opt/kerbrute ]] && git clone https://github.com/ropnop/kerbrute.git /opt/kerbrute
    [[ ! -d /opt/krbrelayx ]] && git clone https://github.com/dirkjanm/krbrelayx.git /opt/krbrelayx
    [[ ! -d /opt/ldeep ]] && git clone https://github.com/franc-pentest/ldeep /opt/ldeep
    [[ ! -d /opt/malwoverview ]] && git clone https://github.com/alexandreborges/malwoverview.git /opt/malwoverview
    [[ ! -d /opt/masscan ]] && git clone https://github.com/robertdavidgraham/masscan.git /opt/masscan
    [[ ! -d /opt/mitm6 ]] && git clone https://github.com/dirkjanm/mitm6.git /opt/mitm6
    [[ ! -d /opt/o365spray ]] && git clone https://github.com/0xZDH/o365spray.git /opt/o365spray
    [[ ! -d /opt/parsuite ]] &&  git clone https://github.com/arch4ngel/parsuite.git /opt/parsuite
    [[ ! -d /opt/pre2k ]] && git clone https://github.com/garrettfoster13/pre2k.git /opt/pre2k
    [[ ! -d /opt/pyLAPS ]] && git clone https://github.com/p0dalirius/pyLAPS.git /opt/pyLAPS
    [[ ! -d /opt/rdp-sec-check ]] && git clone https://github.com/CiscoCXSecurity/rdp-sec-check.git /opt/rdp-sec-check
    [[ ! -d /opt/sccmhunter ]] && git clone https://github.com/garrettfoster13/sccmhunter.git /opt/sccmhunter
    [[ ! -d /opt/ssh-audit ]] &&  git clone https://github.com/mr-pmillz/ssh-audit.git /opt/ssh-audit
    [[ ! -d /opt/testssl.sh ]] && git clone --depth 1 https://github.com/drwetter/testssl.sh.git /opt/testssl.sh
    [[ ! -d /opt/trufflehog ]] && git clone https://github.com/trufflesecurity/trufflehog.git /opt/trufflehog
    [[ ! -d /opt/usernamer ]] &&  git clone https://github.com/jseidl/usernamer.git /opt/usernamer
    [[ ! -d /tmp/testssl.sh ]] &&  git clone https://github.com/drwetter/testssl.sh.git /tmp/testssl.sh
    [[ ! -d /opt/sslscan ]] &&  git clone https://github.com/rbsec/sslscan.git /opt/sslscan
    [[ ! -d /opt/winshock-test ]] &&  git clone https://github.com/anexia-it/winshock-test.git /opt/winshock-test
    [[ ! -d /opt/ike-scan ]] &&  git clone https://github.com/royhills/ike-scan.git /opt/ike-scan
    [[ ! -d /opt/ikeforce ]] &&  git clone https://github.com/SpiderLabs/ikeforce.git /opt/ikeforce
    [[ ! -d /opt/wpscan ]] &&  git clone https://github.com/wpscanteam/wpscan.git /opt/wpscan
    [[ ! -d /opt/pymeta ]] &&  git clone https://github.com/m8r0wn/pymeta.git /opt/pymeta
    [[ ! -d /opt/ntlmv1-multi ]] &&  git clone https://github.com/evilmog/ntlmv1-multi.git /opt/ntlmv1-multi
    [[ ! -d /opt/SIET ]] &&  git clone https://github.com/frostbits-security/SIET.git /opt/SIET
    # Needed for GoRecon Modules
    [[ ! -d /tmp/testssl.sh ]] &&  git clone https://github.com/drwetter/testssl.sh.git /tmp/testssl.sh
    [[ ! -d /opt/enum4linux-ng ]] &&  git clone https://github.com/cddmp/enum4linux-ng.git /opt/enum4linux-ng
    [[ ! -d /opt/ssh-audit ]] &&  git clone https://github.com/mr-pmillz/ssh-audit.git /opt/ssh-audit
    ### pr_SystemDPAPIdump
    wget https://codeload.github.com/clavoillotte/impacket/zip/refs/heads/pr_SystemDPAPIdump -P /opt/pr_SystemDPAPIdump
    
    #
    # New Adds
    [[ ! -d /opt/redis-rogue-server ]] &&  git clone https://github.com/n0b0dyCN/redis-rogue-server.git /opt/redis-rogue-server
    [[ ! -d /opt/hakrevdns ]] &&  git clone https://github.com/hakluke/hakrevdns.git /opt/hakrevdns
    [[ ! -d /opt/ccat ]] &&  git clone https://github.com/frostbits-security/ccat.git /opt/ccat
    [[ ! -d /opt/SeeYouCM-Thief ]] &&  git clone https://github.com/trustedsec/SeeYouCM-Thief.git /opt/SeeYouCM-Thief
    [[ ! -d /opt/onedrive_user_enum ]] && git clone https://github.com/nyxgeek/onedrive_user_enum.git /opt/onedrive_user_enum
    [[ ! -d /opt/CVE-2017-12542 ]] && git clone https://github.com/skelsec/CVE-2017-12542.git /opt/CVE-2017-12542
    [[ ! -d /opt/Active-Directory-Spotlights ]] && git clone https://github.com/sse-secure-systems/Active-Directory-Spotlights.git /opt/Active-Directory-Spotlights



}


# Activate pyenv software 
alias go-mitm6='source /root/pyenv/mitm6/bin/activate;cd /opt/mitm6'
alias go-webclientServiceScanner='source /root/pyenv/WebclientServiceScanner/bin/activate;cd /opt/WebclientServiceScanner'
alias go-impacket='source /root/pyenv/impacket/bin/activate;cd /opt/impacket/examples/'
alias go-BloodHoundpy='source /root/pyenv/BloodHound.py/bin/activate;cd /opt/BloodHound.py'
alias go-Certipy='source /root/pyenv/Certipy/bin/activate;cd /opt/Certipy/'
alias go-pre2k='source /root/pyenv/pre2k/bin/activate;cd /opt/pre2k'
alias go-AADInternals='source /root/pyenv/AADInternals/bin/activate;cd /opt/AADInternals'
alias go-ADCSync='source /root/pyenv/ADCSync/bin/activate;cd /opt/ADCSync'
alias go-BruteLoops='source /root/pyenv/BruteLoops/bin/activate;cd /opt/BruteLoops'
alias go-CeWL='source /root/pyenv/CeWL/bin/activate;cd /opt/CeWL'
alias go-Coercer='source /root/pyenv/Coercer/bin/activate;cd /opt/Coercer'
alias go-CredMaster='source /root/pyenv/CredMaster/bin/activate;cd /opt/CredMaster'
alias go-DPAT='source /root/pyenv/DPAT/bin/activate;cd /opt/DPAT'
alias go-DomainPasswordSpray='source /root/pyenv/DomainPasswordSpray/bin/activate;cd /opt/DomainPasswordSpray'
alias go-DonPAPI='source /root/pyenv/DonPAPI/bin/activate;cd /opt/DonPAPI'
alias go-EyeWitness='source /root/pyenv/EyeWitness/bin/activate;cd /opt/EyeWitness'
alias go-Go365='source /root/pyenv/Go365/bin/activate;cd /opt/Go365'
alias go-KrbRelayUp='source /root/pyenv/KrbRelayUp/bin/activate;cd /opt/KrbRelayUp'
alias go-LdapRelayScan='source /root/pyenv/LdapRelayScan/bin/activate;cd /opt/LdapRelayScan'
alias go-MFASweep='source /root/pyenv/MFASweep/bin/activate;cd /opt/MFASweep'
alias go-MSOLSpray='source /root/pyenv/MSOLSpray/bin/activate;cd /opt/MSOLSpray'
alias go-MailSniper='source /root/pyenv/MailSniper/bin/activate;cd /opt/MailSniper'
alias go-PCredz='source /root/pyenv/PCredz/bin/activate;cd /opt/PCredz'
alias go-PKINITtools='source /root/pyenv/PKINITtools/bin/activate;cd /opt/PKINITtools'
alias go-pxethiefy='source /root/pyenv/pxethiefy/bin/activate;cd /opt/pxethiefy'
alias go-PetitPotam='cd /opt/PetitPotam'
alias go-PowerUpSQL='source /root/pyenv/PowerUpSQL/bin/activate;cd /opt/PowerUpSQL'
alias go-SIET='source /root/pyenv/SIET/bin/activate;cd /opt/SIET'
alias go-SIGIT='source /root/pyenv/SIGIT/bin/activate;cd /opt/SIGIT'
alias go-SQLAutoPwn='source /root/pyenv/SQLAutoPwn/bin/activate;cd /opt/SQLAutoPwn'
alias go-Spray365='source /root/pyenv/Spray365/bin/activate;cd /opt/Spray365'
alias go-SprayingToolkit='source /root/pyenv/SprayingToolkit/bin/activate;cd /opt/SprayingToolkit'
alias go-certsync='source /root/pyenv/certsync/bin/activate;cd /opt/certsync'
alias go-ciscot7='source /root/pyenv/ciscot7/bin/activate;cd /opt/ciscot7'
alias go-containerd='source /root/pyenv/containerd/bin/activate;cd /opt/containerd'
alias go-dnstwist='source /root/pyenv/dnstwist/bin/activate;cd /opt/dnstwist'
alias go-dockerpython39='source /root/pyenv/docker-python3.9/bin/activate;cd /opt/docker-python3.9'
alias go-eavesarp='source /root/pyenv/eavesarp/bin/activate;cd /opt/eavesarp'
alias go-enum4linux-ng='source /root/pyenv/enum4linux-ng/bin/activate;cd /opt/enum4linux-ng'
alias go-fireprox='source /root/pyenv/fireprox/bin/activate;cd /opt/fireprox'
alias go-hardcidr='source /root/pyenv/hardcidr/bin/activate;cd /opt/hardcidr'
alias go-ikeforce='source /root/pyenv/ikeforce/bin/activate;cd /opt/ikeforce'
alias go-ike-scan='source /root/pyenv/ike-scan/bin/activate;cd /opt/ike-scan'
alias go-kerbrute='source /root/pyenv/kerbrute/bin/activate;cd /opt/kerbrute'
alias go-krbrelayx='source /root/pyenv/krbrelayx/bin/activate;cd /opt/krbrelayx'
alias go-ldeep='source /root/pyenv/ldeep/bin/activate;cd /opt/ldeep'
alias go-malwoverview='source /root/pyenv/malwoverview/bin/activate;cd /opt/malwoverview'
alias go-ntlmv1-multi='source /root/pyenv/ntlmv1-multi/bin/activate;cd /opt/ntlmv1-multi'
alias go-o365spray='source /root/pyenv/o365spray/bin/activate;cd /opt/o365spray'
alias go-parsuite='source /root/pyenv/parsuite/bin/activate;cd /opt/parsuite'
alias go-pr_SystemDPAPIdump='source /root/pyenv/pr_SystemDPAPIdump/bin/activate;cd /opt/pr_SystemDPAPIdump'
alias go-pyLAPS='source /root/pyenv/pyLAPS/bin/activate;cd /opt/pyLAPS'
alias go-pymeta='source /root/pyenv/pymeta/bin/activate;cd /opt/pymeta'
alias go-saltstack='source /root/pyenv/saltstack/bin/activate;cd /opt/saltstack'
alias go-sccmhunter='source /root/pyenv/sccmhunter/bin/activate;cd /opt/sccmhunter'
alias go-ssh-audit='source /root/pyenv/ssh-audit/bin/activate;cd /opt/ssh-audit'
alias go-sslscan='source /root/pyenv/sslscan/bin/activate;cd /opt/sslscan'
alias go-testsslsh='source /root/pyenv/testssl.sh/bin/activate;cd /opt/testssl.sh'
alias go-usernamer='source /root/pyenv/usernamer/bin/activate;cd /opt/usernamer'
alias go-winshock-test='source /root/pyenv/winshock-test/bin/activate;cd /opt/winshock-test'
alias go-wpscan='source /root/pyenv/wpscan/bin/activate;cd /opt/wpscan'
alias go-trufflehog='source /root/pyenv/trufflehog/bin/activate;cd /opt/trufflehog'
alias go-redis-rogue-server='source /root/pyenv/redis-rogue-server/bin/activate;cd /opt/redis-rogue-server'
alias go-hakrevdns='source /root/pyenv/hakrevdns/bin/activate;cd /opt/hakrevdns'
alias go-ccat='source /root/pyenv/ccat/bin/activate;cd /opt/ccat'
alias go-SeeYouCM-Thief='source /root/pyenv/SeeYouCM-Thief/bin/activate;cd /opt/SeeYouCM-Thief'
alias go-onedrive_user_enum='source /root/pyenv/onedrive_user_enum/bin/activate;cd /opt/onedrive_user_enum'
alias go-CVE-2018-10933='source /root/pyenv/CVE-2018-10933/bin/activate;cd /opt/CVE-2018-10933'


# Deactivate pyenv software
alias da='deactivate;cd ~/testing'

# Log iptable 
alias log-iptables='iptables -L OUTPUT | tee -a /root/testing/logs/$(date '+%Y_%m_%d_%H_%M_%S')-IPTables-implant-.log'

#
alias start-neo4j='cd /usr/bin; ./neo4j console'
alias check-terminal='grep "colorScheme\|TerminalMargin\|TerminalTransparency\|fontFamily\|fontSize" ~/.config/qterminal.org/qterminal.ini'


#### Functions ####
# Install in Python Virtualenv
#
# Function Name: install_with_virtualenv
# Description: This script sets up a Python virtual environment for a given repository,
#              installs required dependencies, and logs the process to a specified log file.
# Author: [Your Name]
# Date: [Current Date]
# Version: 1.0
# Usage: install_with_virtualenv <repository_name>
# Notes: Ensure that the /root/testing/logs/ directory exists and the script has appropriate permissions.
#        Virtualenv and Python 3 must be installed on the system.
#
# Log Location: /root/testing/logs/install.log
#

install-with-virtualenv() {
    REPO_NAME="$1"
    PYENV="${HOME}/pyenv"
    LOG_FILE="/root/testing/logs/install-with-virtualenv-install.log"

    log_message() {
        echo "$(date +'%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"
    }

    log_message "INFO: Starting installation for repository ${REPO_NAME}"

    if [ -d "/opt/${REPO_NAME}" ]; then
        log_message "INFO: Found repository directory /opt/${REPO_NAME}"

        cd "/opt/${REPO_NAME}" || { log_message "ERROR: Failed to change directory to /opt/${REPO_NAME}"; exit 1; }

        log_message "INFO: Creating virtual environment at ${PYENV}/${REPO_NAME}"
        virtualenv -p python3 "${PYENV}/${REPO_NAME}"

        log_message "INFO: Activating virtual environment"
        . "${PYENV}/${REPO_NAME}/bin/activate"

        log_message "INFO: Installing wheel and setuptools"
        python3 -m pip install -U wheel setuptools

        # Ensure that requirements.txt deps are installed.
        if [[ -f requirements.txt ]]; then
            log_message "INFO: Installing dependencies from requirements.txt"
            python3 -m pip install -r requirements.txt
        fi

        # Install from setup.py or pyproject.toml if available
        if [[ -f setup.py || -f pyproject.toml ]]; then
            log_message "INFO: Installing package from setup.py or pyproject.toml"
            python3 -m pip install .
        fi

        log_message "INFO: Deactivating virtual environment"
        deactivate

        cd - &>/dev/null || { log_message "ERROR: Failed to change directory back"; exit 1; }
    else
        log_message "ERROR: ${REPO_NAME} does not exist."
        echo -e "${REPO_NAME} does not exist."
    fi

    log_message "INFO: Completed installation for repository ${REPO_NAME}"
}


# Download and Install the latest debian10 Nessus amd64
download_and_install_latest_nessus() {
    NESSUS_LATEST_URL=$(curl -s https://www.tenable.com/downloads/api/v2/pages/nessus --header 'accept: application/json' | jq -r '.releases.latest' | jq -r '.[][].file_url' | grep 'Nessus-latest-debian10_amd64.deb')
    [[ ! -d "${HOME}/tools" ]] && mkdir "${HOME}/tools"
    cd "${HOME}/tools" && wget "$NESSUS_LATEST_URL" -O "${HOME}/tools/"Nessus-latest-debian10_amd64.deb
    sudo dpkg -i Nessus-latest-debian10_amd64.deb
    cd "${HOME}"
}

# Download the latest debian10 Nessus amd64
download_latest_nessus() {
    NESSUS_LATEST_URL=$(curl -s https://www.tenable.com/downloads/api/v2/pages/nessus --header 'accept: application/json' | jq -r '.releases.latest' | jq -r '.[][].file_url' | grep 'Nessus-latest-debian10_amd64.deb')
    [[ ! -d "${HOME}/tools" ]] && mkdir "${HOME}/tools"
    wget "$NESSUS_LATEST_URL" -O "${HOME}/tools/"Nessus-latest-debian10_amd64.deb
    # sudo dpkg -i Nessus-latest-debian10_amd64.deb
    # cd "${HOME}"
}

install_apt_packages() {
    # apt packages
    # apt-get update -y && apt-get full-upgrade -y
    apt-get update -y
    apt install -y build-essential
    apt install -y dirsearch
    apt install -y dnsrecon 
    apt install -y gedit
    apt install -y dnstwist
    apt install -y eyewitness
    apt install -y feroxbuster
    apt install -y gcc
    apt install -y git
    apt install -y golang
    apt install -y grc
    apt install -y htop
    apt install -y httpx-toolkit
    apt install -y inotify-tools
    apt install -y ipcalc
    apt install -y jq
    apt install -y krb5-config
    apt install -y libffi-dev
    apt install -y libkrb5-dev
    apt install -y libpcap-dev
    apt install -y libssl-dev
    apt install -y libxml2-dev
    apt install -y libxml2-utils
    apt install -y libxslt1-dev
    apt install -y make
    apt install -y masscan
    apt install -y metasploit-framework
    apt install -y ncat
    apt install -y onesixtyone
    apt install -y pipx
    apt install -y proxychains4
    apt install -y python-dev-is-python3
    apt install -y python3
    # apt install -y python3-distutils
    apt install -y python3-venv
    apt install -y python3-virtualenv
    apt install -y python3-pip
    apt install -y python3-netifaces
    apt install -y python3-twisted
    apt install -y remmina
    apt install -y remmina-plugin-rdp
    apt install -y remmina-plugin-secret
    apt install -y ripgrep
    apt install -y rlwrap
    apt install -y rsh-client
    apt install -y rsync
    apt install -y samba
    apt install -y screen
    apt install -y sendemail
    apt install -y silversearcher-ag
    apt install -y smbclient
    apt install -y smbmap
    apt install -y snmp-mibs-downloader
    apt install -y sqlmap
    apt install -y telnet
    apt install -y testssl.sh nmap
    apt install -y tftp-hpa
    apt install -y tmux
    apt install -y urlcrazy ntpsec
    apt install -y vim-nox
    apt install -y virtualenv
    apt install -y whatweb
    apt install -y leafpad
    # apt install -y syncthing
    apt install -y apt-transport-https
    apt install -y prips
    
    # GPS Modules 
    apt install -y gpsd
    apt install -y gpsd-clients
    apt install -y gpsd-tools
    apt install -y python3-gps

    # WiFi 
    apt install -y aircrack-ng
    


    # apt install -y 

    # Bundler Install
    gem install bundler

    # Python packages
    python3 -m pip install Cython
    python3 -m pip install python-libpcap
    python3 -m pip install netaddr
    python3 -m pip install fuzzywuzzy
    python3 -m pip install levenshtein
    python3 -m pip install pyvirtualdisplay

    # remove outdated packages
    apt-get autoremove -y

}

create_roottestingdirectories() {
    # Testing Dir
    [[ ! -d "${HOME}/testing" ]] && mkdir "${HOME}/testing"
    # Domain
    [[ ! -d "${HOME}/testing/domain-recon" ]] && mkdir "${HOME}/testing/domain-recon"
    # Logs
    [[ ! -d "${HOME}/testing/logs" ]] && mkdir "${HOME}/testing/logs"
    [[ ! -d "${HOME}/testing/logs/nmap" ]] && mkdir "${HOME}/testing/logs/nmap"
    [[ ! -d "${HOME}/testing/logs/VirusTotal" ]] && mkdir "${HOME}/testing/logs/VirusTotal"
    # Reconnaissance
    [[ ! -d "${HOME}/testing/Reconnaissance" ]] && mkdir "${HOME}/testing/Reconnaissance"
    [[ ! -d "${HOME}/testing/Reconnaissance/squatting-domains.txt" ]] && touch "${HOME}/testing/Reconnaissance/squatting-domains.txt"
    [[ ! -d "${HOME}/testing/parsed-nessus" ]] && mkdir "${HOME}/testing/parsed-nessus"
    # Masscan
    [[ ! -d "${HOME}/testing/masscan" ]] && mkdir "${HOME}/testing/masscan"
    [[ ! -d "${HOME}/testing/masscan/externalscope" ]] && touch "${HOME}/testing/masscan/externalscope"
    [[ ! -d "${HOME}/testing/masscan/internalscope" ]] && touch "${HOME}/testing/masscan/internalscope"

}

# Function to check system capabilities
check-system() {
    # Check for apt updates
    echo "Checking if apt can update the package repository..."
    sudo apt update > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        echo "APT is working: Package repository updated successfully."
    else
        echo "APT update failed: Unable to update package repository."
        return 1
    fi

    # Test cloning a GitHub repository
    echo "Checking if Git can clone repositories..."
    rm -rf CeWL
    TEST_REPO="https://github.com/digininja/CeWL.git"
    CLONE_DIR="test_clone"
    git clone "$TEST_REPO" > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        echo "Git is working: Repository cloned successfully."
        rm -rf CeWL
    else
        echo "Git clone failed: Unable to clone repository."
        exit 1
    fi

    # Check if Go is installed
    echo "Checking if Go is installed..."
    if ! command -v go > /dev/null 2>&1; then
        echo "Go is not installed. Installing Go..."
        
        # Install Go using apt
        sudo apt install -y golang > /dev/null 2>&1
        
        if [ $? -eq 0 ]; then
            echo "Go installed successfully."
        else
            echo "Go installation failed."
            return 1
        fi
    else
        echo "Go is already installed."
    fi

    # Test installing a Go package
    echo "Checking if Go can install packages..."
    GO_PACKAGE="github.com/ropnop/kerbrute@latest"
    go install "$GO_PACKAGE" > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        echo "Go is working: Go package installed successfully."
    else
        echo "Go install failed: Unable to install Go package."
        return 1
    fi

    echo "All checks passed!"
    return 0
}


check-hardware() {
    ALL_GOOD=true

    echo -e "${PURPLE}[*]${RESET} Checking implant system requirements:\nCPU >= 4\tRAM >= 8 GB\n"

    NUM_CPUS=$(lscpu | grep 'CPU(s):' | head -n 1 | awk '{print $NF}')
    if (( "$NUM_CPUS" < 4 )); then
        ALL_GOOD=false
        echo -e "${RED}[-]${RESET}${BOLD} Implant has INSUFFICIENT CPUs! CPU(s): ${NUM_CPUS} REACH OUT TO CUSTOMER ${RESET}"
    else
        echo -e "${GREEN}[+]${RESET}${BOLD} CPU(s): ${NUM_CPUS} ${RESET}"
    fi

    TOTAL_RAM=$(grep MemTotal /proc/meminfo | awk '{print $2}')
    if (( "$TOTAL_RAM" < 8000000 )); then
        ALL_GOOD=false
        echo -e "${RED}[-]${RESET}${BOLD} Implant has INSUFFICIENT MEMORY.. Total Ram: ${TOTAL_RAM} kB. REACH OUT TO CUSTOMER ${RESET}"
    else
        echo -e "${GREEN}[+]${RESET}${BOLD} Total RAM: ${TOTAL_RAM} kB ${RESET}"
    fi

    if ! $ALL_GOOD ; then
        echo -e "${ORANGE}[!]${RESET}${BOLD} You must construct additional pylons ${RESET}"
    else
        echo -e "${BLUE}[+]${RESET}${BOLD} All systems good to go! ${RESET}"
    fi
}

check-hardware-requirements() {
    ALL_GOOD=true

    echo -e "${PURPLE}[*]${RESET} Checking implant system requirements:\nCPU >= 4\tRAM >= 8 GB\tDisk >= 100 GB\n"

    NUM_CPUS=$(lscpu | grep 'CPU(s):' | head -n 1 | awk '{print $NF}')
    if (( "$NUM_CPUS" < 4 )); then
        ALL_GOOD=false
        echo -e "${RED}[-]${RESET}${BOLD} Implant has INSUFFICIENT CPUs! CPU(s): ${NUM_CPUS} REACH OUT TO CUSTOMER ${RESET}"
    else
        echo -e "${GREEN}[+]${RESET}${BOLD} CPU(s): ${NUM_CPUS} ${RESET}"
    fi

    TOTAL_RAM=$(grep MemTotal /proc/meminfo | awk '{print $2}')
    TOTAL_RAM_GB=$((TOTAL_RAM / 1048576)) # Integer division to get GB
    if [ "$TOTAL_RAM_GB" -lt 8 ]; then
        ALL_GOOD=false
        echo -e "${RED}[-]${RESET}${BOLD} Implant has INSUFFICIENT MEMORY.. Total Ram: ${TOTAL_RAM_GB} GB. REACH OUT TO CUSTOMER ${RESET}"
    else
        echo -e "${GREEN}[+]${RESET}${BOLD} Total RAM: ${TOTAL_RAM_GB} GB ${RESET}"
    fi

    # Get disk size in bytes for the primary disk (assuming /dev/sda)
    TOTAL_DISK=$(lsblk -b -n -d -o SIZE /dev/sda)
    TOTAL_DISK_GB=$((TOTAL_DISK / 1073741824)) # Convert bytes to GB
    if [ "$TOTAL_DISK_GB" -lt 60 ]; then
        ALL_GOOD=false
        echo -e "${RED}[-]${RESET}${BOLD} Implant has INSUFFICIENT DISK SPACE! Total Disk: ${TOTAL_DISK_GB} GB. REACH OUT TO CUSTOMER ${RESET}"
    else
        echo -e "${GREEN}[+]${RESET}${BOLD} Total Disk: ${TOTAL_DISK_GB} GB ${RESET}"
    fi

    if ! $ALL_GOOD ; then
        echo -e "${ORANGE}[!]${RESET}${BOLD} You must construct additional pylons ${RESET}"
    else
        echo -e "${BLUE}[+]${RESET}${BOLD} All systems good to go! ${RESET}"
    fi
}




# Terminal Setup
# Call the function
# check-system
#
### End of Functions ### 
#
## END SCRIPT ##