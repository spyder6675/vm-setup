########################
# Testing Variables
donode=
implantip=100.64.0.3
c2=
#
# Creds
export passwd=''


# Making wordlists easily accessible as variables
export raftmediumdir='/usr/share/seclists/Discovery/Web-Content/raft-medium-directories.txt'
export raftmediumfiles='/usr/share/seclists/Discovery/Web-Content/raft-medium-files.txt'
#
export rockyou='/usr/share/wordlists/rockyou.txt'
#
# Install_tools.sh 
export PATH="${PATH}:${HOME}/.local/bin"
#
# User Agent 
export useragent='Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:123.0) Gecko/20100101 Firefox/141.0'
#
# Log File
export testing_logs='/root/testing/logs'
#
#
#
### Update Aliases ###
alias update-alias='rm -rf ${HOME}/.alias; wget https://raw.githubusercontent.com/spyder6675/vm-setup/main/.alias -P ${HOME};echo -e "Updated-Alias"'
alias szsh='source ~/.zshrc'
#
# Navigation
alias ll='ls -lah'
#alias ..='cd ..'
#alias ...='cd ../..'
# System etc
# alias grep='grep --color=always'
# alias grep='grep -P'
# alias ls='ls --color=auto'
alias df='df -h' # 
alias x='exit' # 
alias chx='chmod +x ' 
#
alias list-files='ls -p tasks | grep -v /'
#
# date time stamp
alias date_time="date '+%Y-%m-%d-%H-%M-%S'"
# 
alias upgrade='sudo apt update -y && sudo apt upgrade -y'
alias pyweb='python3 -m http.server 8080'
# alias nmap="grc nmap" 
alias my-ip='echo $(ifconfig eth0 | grep "inet " | cut -b 9- | cut -d" " -f2)'
alias int-ip='ip -br -c a'
alias ext-ip='curl http://ipecho.net/plain; echo' # Get your external IP address.
alias wtf-ip="curl wtfismyip.com/json"
alias speedtest='curl -s https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py | python -'
alias wtr='curl wttr.in'
alias i="sudo apt install -y "
alias e="nano "
# Nessus 
alias nessus-start='/bin/systemctl start nessusd.service'
alias nessus-stop='/bin/systemctl stop nessusd.service'
alias nessus-restart='/bin/systemctl restart nessusd.service'
alias nessus-status='/bin/systemctl status nessusd.service'
# postgresql
alias postgresql-start='/bin/systemctl start postgresql.service'
alias postgresql-stop='/bin/systemctl stop postgresql.service'
alias postgresql-restart='/bin/systemctl restart postgresql.service'
alias postgresql-status='/bin/systemctl status postgresql.service'
# VPN
alias start-vpn='sudo openvpn /home/kali/Documents/VPN/profile-861.ovpn'
# SSH
alias nessus-ssh='ssh -L 8834:'$implantip':8834 root@'$implantip''  
alias go-do='ssh root@'$donode'' # Go to Do Node
alias go-implant='ssh root@'$implantip'' # Go to Implantip
# Rsync
alias sync-do='rsync -avz root@'$donode':/root/testing/'*' .'
alias sync-implant='rsync -avz root@'$implantip':/root/testing/'*' .'
alias sync-implant02='rsync -avz root@100.64.0.2:/root/testing/'*' .'
alias sync-implant03='rsync -avz root@100.64.0.3:/root/testing/'*' .'
alias sync-implant04='rsync -avz root@100.64.0.4:/root/testing/'*' .'
alias sync-implant05='rsync -avz root@100.64.0.5:/root/testing/'*' .'
# Tailscale 
alias tss='tailscale status'
alias wtss='watch -n 1 tailscale status'
alias rtss='sudo systemctl restart tailscaled.service'
# Nmap
alias nmap-scripts='ls /usr/share/nmap/scripts | grep'
#
# alias untar='tar -zxvf'
# alias tar='tar -zcvf'
alias ns='netstat -tuln'
alias psg='ps aux | grep'
alias msf='msfconsole -q'
alias nuclei='nuclei -profile pentest.yml'
#
# Copy to clipboard
alias clp='xclip -selection c -r'
#
# hash-checks
alias hash-check-opt='cd /opt/Responder/logs && for i in $(cat *-NTLMv2*.txt | cut -d':' -f1 | sort -u) ; do grep --no-filename "$i" *-NTLMv2*.txt | head -n1 ; done > /root/testing/sorted_unique_ntlmv2_hashes.txt ; cat /root/testing/sorted_unique_ntlmv2_hashes.txt | wc ; cd ~/testing'
#
# NTLMv1
alias hash-check-ntlmv1='cd /usr/share/responder/logs && for i in $(cat *-NTLMv1*.txt | cut -d':' -f1 | sort -u) ; do grep --no-filename "$i" *-NTLMv1*.txt | head -n1 ; done > /root/testing/sorted_unique_ntlmv1_hashes.txt ; cat /root/testing/sorted_unique_ntlmv1_hashes.txt | wc ; cd ~/testing'
#
# NTLMv2
alias hash-check='cd /usr/share/responder/logs && for i in $(cat *-NTLMv2*.txt | cut -d':' -f1 | sort -u) ; do grep --no-filename "$i" *-NTLMv2*.txt | head -n1 ; done > /root/testing/sorted_unique_ntlmv2_hashes.txt ; cat /root/testing/sorted_unique_ntlmv2_hashes.txt | wc ; cd ~/testing'
#
# MSSQL 
alias hash-check-MSSQL='cd /usr/share/responder/logs && for i in $(cat *MSSQL-*.txt | cut -d':' -f1 | sort -u) ; do grep --no-filename "$i" *MSSQL-*.txt | head -n1 ; done > /root/testing/sorted_unique_MSSQL-CLEARTEXT_hashes.txt ; cat /root/testing/sorted_unique_MSSQL-CLEARTEXT_hashes.txt | wc ; cd ~/testing'
#
# Copy Resolve.conf
alias copy-resolvconf='cp /etc/resolv.conf /root/testing/domain-recon/resolv.conf'
#
# Watch Passwd Spray
alias watch-pwspray="watch -n 1 'cat *-kerbrute-passwordspray.log| grep '+''"
#
# Responder Conf HTTP and SMB on / OFF
alias smb-responder-on="cd /usr/share/responder;sed -i 's/SMB      = Off/SMB      = On/g' Responder.conf;sed -i 's/HTTP     = Off/HTTP     = On/g' Responder.conf;head -n 20 Responder.conf"
alias smb-responder-off="cd /usr/share/responder;sed -i 's/SMB      = On/SMB      = Off/g' Responder.conf;sed -i 's/HTTP     = On/HTTP     = Off/g' Responder.conf;head -n 20 Responder.conf"
alias smb-responder-check="head -n 20 /usr/share/responder/Responder.conf"
#
#

#
# Deactivate pyenv software
alias da='deactivate;cd ~/testing'
#
# Log iptable 
alias log-iptables='iptables -L OUTPUT | tee -a /root/testing/logs/IPTables-implant-$(date '+%Y_%m_%d_%H_%M_%S').log'
#
#
alias start-neo4j='cd /usr/bin;./neo4j console'
alias check-terminal='grep "colorScheme\|TerminalMargin\|TerminalTransparency\|fontFamily\|fontSize" ~/.config/qterminal.org/qterminal.ini'
alias list-myfunctions="cat .alias | grep ') {' | grep -v log_ | cut -d '(' -f1 | sort"
#
# ProxyChains4
alias check-proxychains4='tail /etc/proxychains4.conf'
alias set-proxychains-socks5-1080="sed -i 's/socks4/#socks4/' /etc/proxychains4.conf;echo -e "socks5\t127.0.0.1 1080" >> /etc/proxychains4.conf;tail /etc/proxychains4.conf"

# Activate pyenv software 
alias go-mitm6='source /root/pyenv/mitm6/bin/activate;cd /opt/mitm6'
alias go-webclientServiceScanner='source /root/pyenv/WebclientServiceScanner/bin/activate;cd /opt/WebclientServiceScanner'
alias go-impacket='source /root/pyenv/impacket/bin/activate;cd /opt/impacket/examples/'
alias go-BloodHoundpy='source /root/pyenv/BloodHound.py/bin/activate;cd /opt/BloodHound.py'
alias go-Certipy='source /root/pyenv/Certipy/bin/activate;cd /opt/Certipy/'
alias go-pre2k='source /root/pyenv/pre2k/bin/activate;cd /opt/pre2k'
alias go-AADInternals='source /root/pyenv/AADInternals/bin/activate;cd /opt/AADInternals'
alias go-ADCSync='source /root/pyenv/ADCSync/bin/activate;cd /opt/ADCSync'
alias go-BruteLoops='source /root/pyenv/BruteLoops/bin/activate;cd /opt/BruteLoops'
alias go-CeWL='source /root/pyenv/CeWL/bin/activate;cd /opt/CeWL'
alias go-Coercer='source /root/pyenv/Coercer/bin/activate;cd /opt/Coercer'
alias go-CredMaster='source /root/pyenv/CredMaster/bin/activate;cd /opt/CredMaster'
alias go-DPAT='source /root/pyenv/DPAT/bin/activate;cd /opt/DPAT'
alias go-DomainPasswordSpray='source /root/pyenv/DomainPasswordSpray/bin/activate;cd /opt/DomainPasswordSpray'
alias go-DonPAPI='source /root/pyenv/DonPAPI/bin/activate;cd /opt/DonPAPI'
alias go-EyeWitness='source /root/pyenv/EyeWitness/bin/activate;cd /opt/EyeWitness'
alias go-Go365='source /root/pyenv/Go365/bin/activate;cd /opt/Go365'
alias go-KrbRelayUp='source /root/pyenv/KrbRelayUp/bin/activate;cd /opt/KrbRelayUp'
alias go-LdapRelayScan='source /root/pyenv/LdapRelayScan/bin/activate;cd /opt/LdapRelayScan'
alias go-MFASweep='source /root/pyenv/MFASweep/bin/activate;cd /opt/MFASweep'
alias go-MSOLSpray='source /root/pyenv/MSOLSpray/bin/activate;cd /opt/MSOLSpray'
alias go-MailSniper='source /root/pyenv/MailSniper/bin/activate;cd /opt/MailSniper'
alias go-PCredz='source /root/pyenv/PCredz/bin/activate;cd /opt/PCredz'
alias go-PKINITtools='source /root/pyenv/PKINITtools/bin/activate;cd /opt/PKINITtools'
alias go-pxethiefy='source /root/pyenv/pxethiefy/bin/activate;cd /opt/pxethiefy'
alias go-PetitPotam='cd /opt/PetitPotam'
alias go-PowerUpSQL='source /root/pyenv/PowerUpSQL/bin/activate;cd /opt/PowerUpSQL'
alias go-responder='source /root/pyenv/Responder/bin/activate;cd /opt/Responder'
alias go-SIET='source /root/pyenv/SIET/bin/activate;cd /opt/SIET'
alias go-SIGIT='source /root/pyenv/SIGIT/bin/activate;cd /opt/SIGIT'
alias go-SQLAutoPwn='source /root/pyenv/SQLAutoPwn/bin/activate;cd /opt/SQLAutoPwn'
alias go-Spray365='source /root/pyenv/Spray365/bin/activate;cd /opt/Spray365'
alias go-SprayingToolkit='source /root/pyenv/SprayingToolkit/bin/activate;cd /opt/SprayingToolkit'
alias go-certsync='source /root/pyenv/certsync/bin/activate;cd /opt/certsync'
alias go-ciscot7='source /root/pyenv/ciscot7/bin/activate;cd /opt/ciscot7'
alias go-containerd='source /root/pyenv/containerd/bin/activate;cd /opt/containerd'
alias go-dnstwist='source /root/pyenv/dnstwist/bin/activate;cd /opt/dnstwist'
alias go-dockerpython39='source /root/pyenv/docker-python3.9/bin/activate;cd /opt/docker-python3.9'
alias go-eavesarp='source /root/pyenv/eavesarp/bin/activate;cd /opt/eavesarp'
alias go-enum4linux-ng='source /root/pyenv/enum4linux-ng/bin/activate;cd /opt/enum4linux-ng'
alias go-fireprox='source /root/pyenv/fireprox/bin/activate;cd /opt/fireprox'
alias go-hardcidr='source /root/pyenv/hardcidr/bin/activate;cd /opt/hardcidr'
alias go-ikeforce='source /root/pyenv/ikeforce/bin/activate;cd /opt/ikeforce'
alias go-ike-scan='source /root/pyenv/ike-scan/bin/activate;cd /opt/ike-scan'
alias go-kerbrute='source /root/pyenv/kerbrute/bin/activate;cd /opt/kerbrute'
alias go-krbrelayx='source /root/pyenv/krbrelayx/bin/activate;cd /opt/krbrelayx'
alias go-ldeep='source /root/pyenv/ldeep/bin/activate;cd /opt/ldeep'
alias go-malwoverview='source /root/pyenv/malwoverview/bin/activate;cd /opt/malwoverview'
alias go-ntlmv1-multi='source /root/pyenv/ntlmv1-multi/bin/activate;cd /opt/ntlmv1-multi'
alias go-o365spray='source /root/pyenv/o365spray/bin/activate;cd /opt/o365spray'
alias go-parsuite='source /root/pyenv/parsuite/bin/activate;cd /opt/parsuite'
alias go-pr_SystemDPAPIdump='source /root/pyenv/pr_SystemDPAPIdump/bin/activate;cd /opt/pr_SystemDPAPIdump'
alias go-pyLAPS='source /root/pyenv/pyLAPS/bin/activate;cd /opt/pyLAPS'
alias go-pymeta='source /root/pyenv/pymeta/bin/activate;cd /opt/pymeta'
alias go-saltstack='source /root/pyenv/saltstack/bin/activate;cd /opt/saltstack'
alias go-sccmhunter='source /root/pyenv/sccmhunter/bin/activate;cd /opt/sccmhunter'
alias go-ssh-audit='source /root/pyenv/ssh-audit/bin/activate;cd /opt/ssh-audit'
alias go-sslscan='source /root/pyenv/sslscan/bin/activate;cd /opt/sslscan'
alias go-testsslsh='source /root/pyenv/testssl.sh/bin/activate;cd /opt/testssl.sh'
alias go-usernamer='source /root/pyenv/usernamer/bin/activate;cd /opt/usernamer'
alias go-winshock-test='source /root/pyenv/winshock-test/bin/activate;cd /opt/winshock-test'
alias go-wpscan='source /root/pyenv/wpscan/bin/activate;cd /opt/wpscan'
alias go-trufflehog='source /root/pyenv/trufflehog/bin/activate;cd /opt/trufflehog'
alias go-redis-rogue-server='source /root/pyenv/redis-rogue-server/bin/activate;cd /opt/redis-rogue-server'
alias go-hakrevdns='source /root/pyenv/hakrevdns/bin/activate;cd /opt/hakrevdns'
alias go-ccat='source /root/pyenv/ccat/bin/activate;cd /opt/ccat'
alias go-SeeYouCM-Thief='source /root/pyenv/SeeYouCM-Thief/bin/activate;cd /opt/SeeYouCM-Thief'
alias go-onedrive_user_enum='source /root/pyenv/onedrive_user_enum/bin/activate;cd /opt/onedrive_user_enum'
alias go-CVE-2018-10933='source /root/pyenv/CVE-2018-10933/bin/activate;cd /opt/CVE-2018-10933'
alias go-evilrdp='source /root/pyenv/evilrdp/bin/activate;cd /opt/evilrdp'
alias go-AutoRDPwn='source /root/pyenv/AutoRDPwn/bin/activate;cd /opt/AutoRDPwn'
alias go-eavesarp-ng='source /root/pyenv/eavesarp-ng/bin/activate;cd /opt/eavesarp-ng'
alias go-netexec='source /root/pyenv/netexec/bin/activate;cd /opt/NetExec'



#### Functions ####



# Clone Git Repos 
# clone-git-repos - my_functions
clone-git-repos() {
	#
	# Needed for GoRecon Modules
	# [[ ! -d /opt/SIGIT ]] && git clone https://github.com/termuxhackers-id/SIGIT.git /opt/SIGIT # Git was removed
	# [[ ! -d /opt/SecLists ]] && git clone https://github.com/danielmiessler/SecLists.git /opt/SecLists
	# [[ ! -d /opt/TODO ]] && git clone TODO /opt/TODO
	# [[ ! -d /opt/TODO ]] && git clone TODO /opt/TODO
	[[ ! -d /opt/AADInternals ]] && git clone https://github.com/Gerenios/AADInternals.git /opt/AADInternals
	[[ ! -d /opt/ADCSync ]] && git clone https://github.com/JPG0mez/ADCSync.git /opt/ADCSync
	[[ ! -d /opt/Active-Directory-Spotlights ]] && git clone https://github.com/sse-secure-systems/Active-Directory-Spotlights.git /opt/Active-Directory-Spotlights
	[[ ! -d /opt/AutoRDPwn ]] && git clone https://github.com/JoelGMSec/AutoRDPwn.git /opt/AutoRDPwn
	[[ ! -d /opt/BloodHound.py ]] && git clone https://github.com/dirkjanm/bloodhound.py /opt/BloodHound.py
	[[ ! -d /opt/BruteLoops ]] && git clone https://github.com/arch4ngel/BruteLoops.git /opt/BruteLoops
	[[ ! -d /opt/CVE-2017-12542 ]] && git clone https://github.com/skelsec/CVE-2017-12542.git /opt/CVE-2017-12542
	[[ ! -d /opt/CeWL ]] && git clone https://github.com/digininja/CeWL.git /opt/CeWL
	[[ ! -d /opt/Certipy ]] && git clone https://github.com/ly4k/Certipy.git /opt/Certipy
	[[ ! -d /opt/Coercer ]] && git clone https://github.com/p0dalirius/Coercer.git /opt/Coercer
	[[ ! -d /opt/CredMaster ]] && git clone https://github.com/knavesec/CredMaster.git /opt/CredMaster
	[[ ! -d /opt/DPAT ]] && git clone https://github.com/clr2of8/DPAT.git /opt/DPAT
	[[ ! -d /opt/DomainPasswordSpray ]] && git clone https://github.com/dafthack/DomainPasswordSpray.git /opt/DomainPasswordSpray
	[[ ! -d /opt/DonPAPI ]] && git clone https://github.com/login-securite/DonPAPI.git /opt/DonPAPI
	[[ ! -d /opt/EyeWitness ]] && git clone https://github.com/RedSiege/EyeWitness.git /opt/EyeWitness
	[[ ! -d /opt/GPOddity ]] && git clone https://github.com/synacktiv/GPOddity.git /opt/GPOddity
	[[ ! -d /opt/Go365 ]] && git clone https://github.com/optiv/Go365.git /opt/Go365
	[[ ! -d /opt/KrbRelayUp ]] && git clone https://github.com/Dec0ne/KrbRelayUp.git /opt/KrbRelayUp
	[[ ! -d /opt/LdapRelayScan ]] && git clone https://github.com/zyn3rgy/LdapRelayScan.git /opt/LdapRelayScan
	[[ ! -d /opt/MANSPIDER ]] && git clone https://github.com/blacklanternsecurity/MANSPIDER.git /opt/MANSPIDER
	[[ ! -d /opt/MFASweep ]] && git clone https://github.com/dafthack/MFASweep.git /opt/MFASweep
	[[ ! -d /opt/MSOLSpray ]] && git clone https://github.com/dafthack/MSOLSpray.git /opt/MSOLSpray
	[[ ! -d /opt/MailSniper ]] && git clone https://github.com/dafthack/MailSniper.git /opt/MailSniper
	[[ ! -d /opt/NetExec ]] && git clone https://github.com/Pennyw0rth/NetExec.git /opt/NetExec
	[[ ! -d /opt/PCredz ]] && git clone https://github.com/lgandx/PCredz.git /opt/PCredz
	[[ ! -d /opt/PKINITtools ]] && git clone https://github.com/dirkjanm/PKINITtools.git /opt/PKINITtools
	[[ ! -d /opt/PetitPotam ]] && git clone https://github.com/topotam/PetitPotam.git /opt/PetitPotam
	[[ ! -d /opt/PlumHound ]] && git clone https://github.com/PlumHound/PlumHound.git /opt/PlumHound
	[[ ! -d /opt/PowerUpSQL ]] && git clone https://github.com/NetSPI/PowerUpSQL.git /opt/PowerUpSQL
	[[ ! -d /opt/Responder ]] && git clone https://github.com/lgandx/Responder.git /opt/Responder
	[[ ! -d /opt/RustHound ]] && git clone https://github.com/NH-RED-TEAM/RustHound.git /opt/RustHound
	[[ ! -d /opt/SIET ]] && git clone https://github.com/frostbits-security/SIET.git /opt/SIET
	[[ ! -d /opt/SQLAutoPwn ]] && git clone https://github.com/Wh1t3Rh1n0/SQLAutoPwn.git /opt/SQLAutoPwn
	[[ ! -d /opt/SeeYouCM-Thief ]] && git clone https://github.com/trustedsec/SeeYouCM-Thief.git /opt/SeeYouCM-Thief
	[[ ! -d /opt/SnafflerParser ]] && git clone https://github.com/zh54321/SnafflerParser.git /opt/SnafflerParser
	[[ ! -d /opt/Spray365 ]] && git clone https://github.com/MarkoH17/Spray365.git /opt/Spray365
	[[ ! -d /opt/SprayingToolkit ]] && git clone https://github.com/byt3bl33d3r/SprayingToolkit.git /opt/SprayingToolkit
	[[ ! -d /opt/adidnsdump ]] && git clone https://github.com/dirkjanm/adidnsdump.git /opt/adidnsdump
	[[ ! -d /opt/bloodyAD ]] && git clone https://github.com/CravateRouge/bloodyAD.git /opt/bloodyAD
	[[ ! -d /opt/ccat ]] && git clone https://github.com/frostbits-security/ccat.git /opt/ccat
	[[ ! -d /opt/ccmpwn ]] && git clone https://github.com/mandiant/ccmpwn.git /opt/ccmpwn
	[[ ! -d /opt/certsync ]] && git clone https://github.com/zblurx/certsync.git /opt/certsync
	[[ ! -d /opt/ciscot7 ]] && git clone https://github.com/theevilbit/ciscot7.git /opt/ciscot7
	[[ ! -d /opt/dns-triage ]] && git clone https://github.com/Wh1t3Rh1n0/dns-triage.git /opt/dns-triage
	[[ ! -d /opt/dnstwist ]] && git clone https://github.com/elceef/dnstwist.git /opt/dnstwist
	[[ ! -d /opt/dploot ]] && git clone https://github.com/zblurx/dploot.git /opt/dploot
	[[ ! -d /opt/eavesarp-ng ]] && git clone https://github.com/ImpostorKeanu/eavesarp-ng.git /opt/eavesarp-ng
	[[ ! -d /opt/enum4linux-ng ]] && git clone https://github.com/cddmp/enum4linux-ng.git /opt/enum4linux-ng
	[[ ! -d /opt/evilrdp ]] && git clone https://github.com/skelsec/evilrdp.git /opt/evilrdp
	[[ ! -d /opt/fireprox ]] && git clone https://github.com/ustayready/fireprox.git /opt/fireprox
	[[ ! -d /opt/gitleaks ]] && git clone https://github.com/gitleaks/gitleaks.git /opt/gitleaks
	[[ ! -d /opt/hakrevdns ]] && git clone https://github.com/hakluke/hakrevdns.git /opt/hakrevdns
	[[ ! -d /opt/hardcidr ]] && git clone https://github.com/trustedsec/hardcidr.git /opt/hardcidr
	[[ ! -d /opt/ike-scan ]] && git clone https://github.com/royhills/ike-scan.git /opt/ike-scan
	[[ ! -d /opt/ikeforce ]] && git clone https://github.com/SpiderLabs/ikeforce.git /opt/ikeforce
	[[ ! -d /opt/impacket ]] && git clone https://github.com/ThePorgs/impacket.git /opt/ThePorgs-impacket
	[[ ! -d /opt/impacket ]] && git clone https://github.com/fortra/impacket.git /opt/impacket
	# Impacket Interactive Shadow Creds Fork
	[[ ! -d /opt/impacket-interactive-ldap-shadow-creds ]] && wget https://github.com/Tw1sm/impacket/archive/refs/heads/interactive-ldap-shadow-creds.zip -O /opt/interactive-ldap-shadow-creds.zip;unzip /opt/interactive-ldap-shadow-creds.zip -d /opt/impacket-interactive-ldap-shadow-creds
	[[ ! -d /opt/kerbrute ]] && git clone https://github.com/ropnop/kerbrute.git /opt/kerbrute
	[[ ! -d /opt/krbrelayx ]] && git clone https://github.com/dirkjanm/krbrelayx.git /opt/krbrelayx
	[[ ! -d /opt/ldeep ]] && git clone https://github.com/franc-pentest/ldeep /opt/ldeep
	[[ ! -d /opt/malwoverview ]] && git clone https://github.com/alexandreborges/malwoverview.git /opt/malwoverview
	[[ ! -d /opt/masscan ]] && git clone https://github.com/robertdavidgraham/masscan.git /opt/masscan
	[[ ! -d /opt/mitm6 ]] && git clone https://github.com/dirkjanm/mitm6.git /opt/mitm6
	[[ ! -d /opt/ntlmv1-multi ]] && git clone https://github.com/evilmog/ntlmv1-multi.git /opt/ntlmv1-multi
	[[ ! -d /opt/o365spray ]] && git clone https://github.com/0xZDH/o365spray.git /opt/o365spray
	[[ ! -d /opt/onedrive_user_enum ]] && git clone https://github.com/nyxgeek/onedrive_user_enum.git /opt/onedrive_user_enum
	[[ ! -d /opt/parsuite ]] && git clone https://github.com/arch4ngel/parsuite.git /opt/parsuite
	[[ ! -d /opt/pr_SystemDPAPIdump ]] && wget https://codeload.github.com/clavoillotte/impacket/zip/refs/heads/pr_SystemDPAPIdump -P /opt/pr_SystemDPAPIdump
	[[ ! -d /opt/pre2k ]] && git clone https://github.com/garrettfoster13/pre2k.git /opt/pre2k
	[[ ! -d /opt/pxethiefy ]] && git clone https://github.com/csandker/pxethiefy.git /opt/pxethiefy
	[[ ! -d /opt/pyGPOAbuse ]] && git clone https://github.com/Hackndo/pyGPOAbuse.git /opt/pyGPOAbuse
	[[ ! -d /opt/pyLAPS ]] && git clone https://github.com/p0dalirius/pyLAPS.git /opt/pyLAPS
	[[ ! -d /opt/pymeta ]] && git clone https://github.com/m8r0wn/pymeta.git /opt/pymeta
	[[ ! -d /opt/pywhisker ]] && git clone https://github.com/ShutdownRepo/pywhisker.git /opt/pywhisker
	[[ ! -d /opt/rdp-sec-check ]] && git clone https://github.com/CiscoCXSecurity/rdp-sec-check.git /opt/rdp-sec-check
	[[ ! -d /opt/redis-rogue-server ]] && git clone https://github.com/n0b0dyCN/redis-rogue-server.git /opt/redis-rogue-server
	[[ ! -d /opt/sccmhunter ]] && git clone https://github.com/garrettfoster13/sccmhunter.git /opt/sccmhunter
	[[ ! -d /opt/ssh-audit ]] && git clone https://github.com/mr-pmillz/ssh-audit.git /opt/ssh-audit
	[[ ! -d /opt/sslscan ]] && git clone https://github.com/rbsec/sslscan.git /opt/sslscan
	[[ ! -d /opt/testssl.sh ]] && git clone --depth 1 https://github.com/drwetter/testssl.sh.git /opt/testssl.sh
	[[ ! -d /opt/trufflehog ]] && git clone https://github.com/trufflesecurity/trufflehog.git /opt/trufflehog
	[[ ! -d /opt/usernamer ]] && git clone https://github.com/jseidl/usernamer.git /opt/usernamer
	[[ ! -d /opt/WebclientServiceScanner ]] && git clone https://github.com/Hackndo/WebclientServiceScanner.git /opt/WebclientServiceScanner
	[[ ! -d /opt/winshock-test ]] && git clone https://github.com/anexia-it/winshock-test.git /opt/winshock-test
	[[ ! -d /opt/wpscan ]] && git clone https://github.com/wpscanteam/wpscan.git /opt/wpscan
	[[ ! -d /tmp/testssl.sh ]] && git clone https://github.com/drwetter/testssl.sh.git /tmp/testssl.sh



}


#
# Install in Python Virtualenv
#
# Function Name: install_with_virtualenv
# Description: This script sets up a Python virtual environment for a given repository,
#              installs required dependencies, and logs the process to a specified log file.
# Author: [Your Name]
# Date: [Current Date]
# Version: 1.0
# Usage: install_with_virtualenv <repository_name>
# Notes: Ensure that the /root/testing/logs/ directory exists and the script has appropriate permissions.
#        Virtualenv and Python 3 must be installed on the system.
#
# Log Location: /root/testing/logs/install.log
#
# install-with-virtualenv - my_functions
install-with-virtualenv() {
    REPO_NAME="$1"
    PYENV="${HOME}/pyenv"
    LOG_FILE="${REPO_NAME}/install-with-virtualenv-install-${REPO_NAME}.log"

    log_message() {
        echo "$(date +'%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"
    }

    log_message "INFO: Starting installation for repository ${REPO_NAME}"

    if [ -d "/opt/${REPO_NAME}" ]; then
        log_message "INFO: Found repository directory /opt/${REPO_NAME}"

        cd "/opt/${REPO_NAME}" || { log_message "ERROR: Failed to change directory to /opt/${REPO_NAME}"; exit 1; }

        log_message "INFO: Creating virtual environment at ${PYENV}/${REPO_NAME}"
        virtualenv -p python3 "${PYENV}/${REPO_NAME}"

        log_message "INFO: Activating virtual environment"
        . "${PYENV}/${REPO_NAME}/bin/activate"

        log_message "INFO: Installing wheel and setuptools"
        python3 -m pip install -U wheel setuptools

        # Ensure that requirements.txt deps are installed.
        if [[ -f requirements.txt ]]; then
            log_message "INFO: Installing dependencies from requirements.txt"
            python3 -m pip install -r requirements.txt
        fi

        # Install from setup.py or pyproject.toml if available
        if [[ -f setup.py || -f pyproject.toml ]]; then
            log_message "INFO: Installing package from setup.py or pyproject.toml"
            python3 -m pip install .
        fi

        log_message "INFO: Deactivating virtual environment"
        deactivate

        cd - &>/dev/null || { log_message "ERROR: Failed to change directory back"; exit 1; }
    else
        log_message "ERROR: ${REPO_NAME} does not exist."
        echo -e "${REPO_NAME} does not exist."
    fi

    log_message "INFO: Completed installation for repository ${REPO_NAME}"
}


#
# Download and Install the latest debian10 Nessus amd64
# download_and_install_latest_nessus - my_functions
download_and_install_latest_nessus() {
    NESSUS_LATEST_URL=$(curl -s https://www.tenable.com/downloads/api/v2/pages/nessus --header 'accept: application/json' | jq -r '.releases.latest' | jq -r '.[][].file_url' | grep 'Nessus-latest-debian10_amd64.deb')
    [[ ! -d "${HOME}/tools" ]] && mkdir "${HOME}/tools"
    cd "${HOME}/tools" && wget "$NESSUS_LATEST_URL" -O "${HOME}/tools/"Nessus-latest-debian10_amd64.deb
    sudo dpkg -i Nessus-latest-debian10_amd64.deb
    cd "${HOME}"
}


# Download the latest debian10 Nessus amd64
# download_latest_nessus - my_functions
download_latest_nessus() {
    NESSUS_LATEST_URL=$(curl -s https://www.tenable.com/downloads/api/v2/pages/nessus --header 'accept: application/json' | jq -r '.releases.latest' | jq -r '.[][].file_url' | grep 'Nessus-latest-debian10_amd64.deb')
    [[ ! -d "${HOME}/tools" ]] && mkdir "${HOME}/tools"
    wget "$NESSUS_LATEST_URL" -O "${HOME}/tools/"Nessus-latest-debian10_amd64.deb
    # sudo dpkg -i Nessus-latest-debian10_amd64.deb
    # cd "${HOME}"
}


# Install apt packages
# install_apt_packages - my_functions
install-apt-packages() {
    # List of packages to install
    local packages=(
        "build-essential"
        "cython3"
        "dirsearch"
        "dnsrecon"
        "gedit"
        "dnstwist"
        "eyewitness"
        "feroxbuster"
        "gcc"
        "geany"
        "git"
        "golang"
        "grc"
        "htop"
        "httpx-toolkit"
        "inotify-tools"
        "ipcalc"
        "jq"
        "krb5-config"
        "libffi-dev"
        "libkrb5-dev"
        "libpcap-dev"
        "libssl-dev"
        "libxml2-dev"
        "libxml2-utils"
        "libxslt1-dev"
        "make"
        "masscan"
        "metasploit-framework"
        "ncat"
        "onesixtyone"
        "pipx"
        "proxychains4"
        "python-dev-is-python3"
        "python3"
        "python3-venv"
        "python3-virtualenv"
        "python3-pip"
        "python3-netifaces"
        "python3-twisted"
        "remmina"
        "remmina-plugin-rdp"
        "remmina-plugin-secret"
        "ripgrep"
        "rlwrap"
        # "rsh-client"
        "rsync"
        "samba"
        "screen"
        "sendemail"
        "silversearcher-ag"
        "smbclient"
        "smbmap"
        "snmp-mibs-downloader"
        "sqlmap"
        "telnet"
        "testssl.sh" 
        "nmap"
        "tftp-hpa"
        "tmux"
        "urlcrazy" 
        "ntpsec"
        "ntpsec-ntpdate"
        "vim-nox"
        "virtualenv"
        "whatweb"
        # "leafpad"
        "apt-transport-https"
        "prips"
		"nftables"
		"conntrack"
		

        # GPS Modules "
        "gpsd"
        "gpsd-clients"
        "gpsd-tools"
        "python3-gps"

        # WiFi "
        "aircrack-ng"
        
    )

    # Update package index
    export DEBIAN_FRONTEND=noninteractive
    apt update -y

    # Install each package in the list
    for package in "${packages[@]}"; do
        apt install -y "$package"
    done

    # Bundler Install
    gem install bundler

    # Python packages
    # python3 -m pip install Cython # Added to APT section
    # python3 -m pip install python-libpcap
    # python3 -m pip install netaddr
    # python3 -m pip install fuzzywuzzy
    # python3 -m pip install levenshtein
    # python3 -m pip install pyvirtualdisplay

    # remove outdated packages
    apt-get autoremove -y


}

# Create Root testing directories
# create_roottestingdirectories - my_functions
create-roottestingdirectories() {
    # Testing Dir
    [[ ! -d "${HOME}/testing" ]] && mkdir "${HOME}/testing"
    [[ ! -f "${HOME}/testing/scope-exclusions.txt" ]] && touch "${HOME}/testing/scope-exclusions.txt"
    [[ ! -f "${HOME}/testing/internalscope.txt" ]] && touch "${HOME}/testing/internalscope.txt"
    [[ ! -f "${HOME}/testing/myuser.txt" ]] && touch "${HOME}/testing/myuser.txt"
    [[ ! -f "${HOME}/testing/userlist.txt" ]] && touch "${HOME}/testing/userlist.txt"
    [[ ! -f "${HOME}/testing/ad-userlist.txt" ]] && touch "${HOME}/testing/ad-userlist.txt"
    # Domain
    [[ ! -d "${HOME}/testing/domain-recon" ]] && mkdir "${HOME}/testing/domain-recon"
    # Logs
    [[ ! -d "${HOME}/testing/logs" ]] && mkdir "${HOME}/testing/logs"
    # [[ ! -d "${HOME}/testing/logs/VirusTotal" ]] && mkdir "${HOME}/testing/logs/VirusTotal"
    # Reconnaissance
    [[ ! -d "${HOME}/testing/Reconnaissance" ]] && mkdir "${HOME}/testing/Reconnaissance"
    # [[ ! -d "${HOME}/testing/Reconnaissance/squatting-domains.txt" ]] && touch "${HOME}/testing/Reconnaissance/squatting-domains.txt"
    [[ ! -d "${HOME}/testing/parsed-nessus" ]] && mkdir "${HOME}/testing/parsed-nessus"
    # Masscan
    [[ ! -d "${HOME}/testing/masscan" ]] && mkdir "${HOME}/testing/masscan"
    [[ ! -f "${HOME}/testing/masscan/masscan.conf" ]] && touch "${HOME}/testing/masscan/masscan.conf"
    # Nmap-Logs
    [[ ! -d "${HOME}/testing/Nmap-logs" ]] && mkdir "${HOME}/testing/Nmap-logs"

}

# Function to check APT, GIT and GO
# check_software - my_functions
check-software() {
    # Check for apt updates
    echo "Checking if apt can update the package repository..."
    sudo apt update -y > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        echo "APT is working: Package repository updated successfully."
    else
        echo "APT update failed: Unable to update package repository."
        return 1
    fi

    # Test cloning a GitHub repository
    echo "Checking if Git can clone repositories..."
    rm -rf CeWL
    TEST_REPO="https://github.com/digininja/CeWL.git"
    CLONE_DIR="test_clone"
    git clone "$TEST_REPO" > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        echo "Git is working: Repository cloned successfully."
        rm -rf CeWL
    else
        echo "Git clone failed: Unable to clone repository."
        exit 1
    fi

    # Check if Go is installed
    echo "Checking if Go is installed..."
    if ! command -v go > /dev/null 2>&1; then
        echo "Go is not installed. Installing Go..."
        
        # Install Go using apt
        sudo apt install -y golang > /dev/null 2>&1
        
        if [ $? -eq 0 ]; then
            echo "Go installed successfully."
        else
            echo "Go installation failed."
            return 1
        fi
    else
        echo "Go is already installed."
    fi

    # Test installing a Go package
    echo "Checking if Go can install packages..."
    GO_PACKAGE="github.com/ropnop/kerbrute@latest"
    go install "$GO_PACKAGE" > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        echo "Go is working: Go package installed successfully."
    else
        echo "Go install failed: Unable to install Go package."
        return 1
    fi

    echo "All checks passed!"
    return 0
}

# Check Hardware 
# check_hardware - my_functions
check-hardware() {
    ALL_GOOD=true

    echo -e "${PURPLE}[*]${RESET} Checking implant system requirements:\nCPU >= 4\tRAM >= 8 GB\tDisk >= 60 GB\n"

    NUM_CPUS=$(lscpu | grep 'CPU(s):' | head -n 1 | awk '{print $NF}')
    if (( "$NUM_CPUS" < 4 )); then
        ALL_GOOD=false
        echo -e "${RED}[-]${RESET}${BOLD} Implant has INSUFFICIENT CPUs! CPU(s): ${NUM_CPUS} REACH OUT TO CUSTOMER ${RESET}"
    else
        echo -e "${GREEN}[+]${RESET}${BOLD} CPU(s): ${NUM_CPUS} ${RESET}"
    fi

    TOTAL_RAM=$(grep MemTotal /proc/meminfo | awk '{print $2}')
    TOTAL_RAM_GB=$((TOTAL_RAM / 1048576)) # Integer division to get GB
    if [ "$TOTAL_RAM_GB" -lt 8 ]; then
        ALL_GOOD=false
        echo -e "${RED}[-]${RESET}${BOLD} Implant has INSUFFICIENT MEMORY.. Total Ram: ${TOTAL_RAM_GB} GB. REACH OUT TO CUSTOMER ${RESET}"
    else
        echo -e "${GREEN}[+]${RESET}${BOLD} Total RAM: ${TOTAL_RAM_GB} GB ${RESET}"
    fi

    # Get disk size in bytes for the primary disk (assuming /dev/sda)
    TOTAL_DISK=$(lsblk -b -n -d -o SIZE /dev/sda)
    TOTAL_DISK_GB=$((TOTAL_DISK / 1073741824)) # Convert bytes to GB
    if [ "$TOTAL_DISK_GB" -lt 60 ]; then
        ALL_GOOD=false
        echo -e "${RED}[-]${RESET}${BOLD} Implant has INSUFFICIENT DISK SPACE! Total Disk: ${TOTAL_DISK_GB} GB. REACH OUT TO CUSTOMER ${RESET}"
    else
        echo -e "${GREEN}[+]${RESET}${BOLD} Total Disk: ${TOTAL_DISK_GB} GB ${RESET}"
    fi

    if ! $ALL_GOOD ; then
        echo -e "${ORANGE}[!]${RESET}${BOLD} You must construct additional pylons ${RESET}"
    else
        echo -e "${BLUE}[+]${RESET}${BOLD} All systems good to go! ${RESET}"
    fi
}

# Cheching SSH Setup
# check_sshd - my_functions
check-sshd() {
    echo -e "${PURPLE}[*]${RESET} Checking SSH setup:\n"

    # Check if SSH is enabled (checking if sshd_config exists)
    if [ -f /etc/ssh/sshd_config ]; then
        echo -e "${GREEN}[+]${RESET} SSH is enabled"
    else
        echo -e "${RED}[-]${RESET} SSH might not be enabled (no sshd_config found)"
    fi

    # Check if SSH is running
    if pgrep sshd >/dev/null; then
        echo -e "${GREEN}[+]${RESET} SSH is running"
    else
        echo -e "${RED}[-]${RESET} SSH is not running"
    fi

    # Check if password authentication is enabled
    if grep -q "^PasswordAuthentication yes" /etc/ssh/sshd_config; then
        echo -e "${GREEN}[+]${RESET} Password authentication is enabled"
    elif grep -q "^PasswordAuthentication no" /etc/ssh/sshd_config; then
        echo -e "${RED}[-]${RESET} Password authentication is disabled"
    else
        echo -e "${ORANGE}[!]${RESET} Password authentication setting not found, might be using defaults"
    fi

    # Check SSH permissions for the current user
    echo -e "\n${BLUE}[*]${RESET} Checking permissions for Current User:"

    ssh_dir="$HOME/.ssh"

    # Check .ssh directory permissions
    if [ -d "$ssh_dir" ]; then
        if [ "$(stat -c %a "$ssh_dir")" == "700" ]; then
            echo -e "${GREEN}[+]${RESET} $ssh_dir has correct permissions (700)"
        else
            echo -e "${RED}[-]${RESET} $ssh_dir permissions are not set to 700 (current: $(stat -c %a "$ssh_dir"))"
        fi

        # Check known_hosts file permissions
        known_hosts_file="$ssh_dir/known_hosts"
        if [ -f "$known_hosts_file" ]; then
            if [ "$(stat -c %a "$known_hosts_file")" == "644" ]; then
                echo -e "${GREEN}[+]${RESET} $known_hosts_file has correct permissions (644)"
            else
                echo -e "${RED}[-]${RESET} $known_hosts_file permissions are not set to 644 (current: $(stat -c %a "$known_hosts_file"))"
            fi
        else
            echo -e "${ORANGE}[!]${RESET} $known_hosts_file does not exist"
        fi

        # Check private key files in .ssh directory
        for file in "$ssh_dir"/*; do
            if [ -f "$file" ] && [ "$file" != "$known_hosts_file" ]; then
                if [[ "$file" == *.pub ]]; then
                    if [ "$(stat -c %a "$file")" == "644" ]; then
                        echo -e "${GREEN}[+]${RESET} $file has correct permissions (644)"
                    else
                        echo -e "${RED}[-]${RESET} $file permissions are not set to 644 (current: $(stat -c %a "$file"))"
                    fi
                else
                    if [ "$(stat -c %a "$file")" == "600" ]; then
                        echo -e "${GREEN}[+]${RESET} $file has correct permissions (600)"
                    else
                        echo -e "${RED}[-]${RESET} $file permissions are not set to 600 (current: $(stat -c %a "$file"))"
                    fi
                fi
            fi
        done
    else
        echo -e "${ORANGE}[!]${RESET} $ssh_dir does not exist"
    fi

    # Display non-commented, non-empty lines from sshd_config
    echo -e "\n${BLUE}[*]${RESET} Non-commented settings in sshd_config:"
    cat /etc/ssh/sshd_config | grep -v '#' | grep -v '^$'
}

# Set SSH Folder and File Permissions
# set_sshpermissions - my_functions
set-ssh-permissions() {
	if [ -d "$HOME/.ssh" ]; then
	  echo "\nSetting SSH permissions on .ssh folder..."
	  chmod 700 "$HOME/.ssh"
	  chmod 600 "$HOME/.ssh"/*
	  chmod 644 "$HOME/.ssh"/known_hosts
	  chmod 644 "$HOME/.ssh"/*.pub
	  echo "SSH permissions set.\n\n"
	else
	  echo "No .ssh folder found. Skipping permission adjustment.\n\n"
	fi
    
    check-ssh-setup
}


# Enable SSH service
# start_sshd - my_functions
enable-sshd() {
	echo "Enabling and Starting SSH service..."
	sudo systemctl enable ssh
	sudo systemctl restart ssh

	# Check if SSH is enabled (checking if sshd_config exists)
    if [ -f /etc/ssh/sshd_config ]; then
        echo -e "${GREEN}[+]${RESET} SSH is enabled"
    else
        echo -e "${RED}[-]${RESET} SSH might not be enabled (no sshd_config found)"
    fi

    # Check if SSH is running
    if pgrep sshd >/dev/null; then
        echo -e "${GREEN}[+]${RESET} SSH is running"
    else
        echo -e "${RED}[-]${RESET} SSH is not running"
    fi
    echo "SSH Service Enabled and Started."
}


# Set local terminal settings
# set_local_terminal_settings - my_functions
set-local-terminal-settings() {

    # Set color scheme to Kali-Light
    sed -i 's/colorScheme=.*/colorScheme=Kali-Light/' ~/.config/qterminal.org/qterminal.ini

    # Set terminal margin to 10
    sed -i 's/TerminalMargin=.*/TerminalMargin=10/' ~/.config/qterminal.org/qterminal.ini

    # Set terminal transparency to 0 (fully opaque)
    sed -i 's/TerminalTransparency=.*/TerminalTransparency=0/' ~/.config/qterminal.org/qterminal.ini

    # Set font family to Monospace
    sed -i 's/fontFamily=.*/fontFamily=Monospace/' ~/.config/qterminal.org/qterminal.ini

    # Set font size to 10
    sed -i 's/fontSize=.*/fontSize=10/' ~/.config/qterminal.org/qterminal.ini

    # Kill qterminal to apply settings and restart it
    pkill qterminal && qterminal &
}

# Test istall apt packages fromfile
# test_install_apt_packages_fromfile - my_functions
test-install-apt-packages-fromfile() {
    # Path to the file containing the list of packages to install
    "$HOME/aptlist.txt"
    wget https://raw.githubusercontent.com/spyder6675/vm-setup/refs/heads/main/aptlist.txt
    local package_file="$HOME/aptlist.txt"
    # Path to the log file
    local log_file="$HOME/log_apt_install.log"
    export DEBIAN_FRONTEND=noninteractive

    # Check if the package file exists
    if [ ! -f "$package_file" ]; then
        echo "Error: Package list file does not exist." | tee -a "$log_file"
        return 1
    fi

    # Update package index
    echo "Updating package index..." | tee -a "$log_file"
    apt-get update -y | tee -a "$log_file"

    # Read each line from the file and install
    while IFS= read -r package; do
        # Trim leading/trailing whitespace
        package=$(echo "$package" | tr -d '[:space:]')
        
        # Skip empty lines, comments, or lines starting with #
        if [[ ! -z "$package" && ! "$package" =~ ^# ]]; then
            echo "Installing package: $package" | tee -a "$log_file"
            if apt install -y "$package" | tee -a "$log_file"; then
                echo "Successfully installed $package" | tee -a "$log_file"
            else
                echo "Failed to install $package" | tee -a "$log_file"
            fi
        else
            echo "Skipping line: $package" | tee -a "$log_file"
        fi
    done < "$package_file"
    rm -rf "$HOME/aptlist.txt"
    cat apt_install_log.txt | grep -i succ
}

# tmux configuration file
# configure-tmux-from-Git - my_functions
configure-tmux-from-git() {
    #
	rm -rf "${HOME}/.tmux.conf"
    [ ! -f ~/.tmux.conf ] && wget https://raw.githubusercontent.com/spyder6675/vm-setup/main/.tmux.conf
    #
    # [ ! -f ~/.tmux.conf ] && touch ~/.tmux.conf
    # echo "set -g mouse on" >> ~/.tmux.conf
}


# Configure tmux
# configure_tmux  - my_functions
configure_tmux() {

rm "${HOME}/.tmux.conf"
cat << 'EOF' >> "${HOME}/.tmux.conf"
set -g mouse on
EOF

}

internal-cleanup() {

    # Create Cleanup directory 
    [[ ! -d "${HOME}/testing/logs/cleanup_logs" ]] && mkdir "${HOME}/testing/logs/cleanup_logs"

    # responder logs
    cp -r /usr/share/responder/logs /root/testing/logs/cleanup_logs/responder-usrshare-logs-$(date '+%Y_%m_%d_%H_%M_%S')
    # responder /opt logs
    cp -r /opt/Responder/logs /root/testing/logs/cleanup_logs/responder-opt-logs-$(date '+%Y_%m_%d_%H_%M_%S')

    # zsh history
    cp /root/.zsh_history /root/testing/logs/cleanup_logs/zsh_history-log-$(date '+%Y_%m_%d_%H_%M_%S')
    # kali_zsh_history
    cp /home/kali/.zsh_history /root/testing/logs/cleanup_logs/kali_zsh_history-$(date '+%Y_%m_%d_%H_%M_%S')
    # Bash history
    cp /root/.bash_history /root/testing/logs/cleanup_logs/bash_history-$(date '+%Y_%m_%d_%H_%M_%S')
    #
    
    ## IPTABLES
    iptables -L OUTPUT | tee -a /root/testing/logs/cleanup_logs/IPTables-implant-$(date '+%Y_%m_%d_%H_%M_%S').log
    # Nessus Rules file
    cp /opt/nessus/etc/nessus/nessusd.rules /root/testing/logs/cleanup_logs/nessusd.rules-$(date '+%Y_%m_%d_%H_%M_%S')
    # Metaspoit loot
    cp -r /root/.msf4/loot /root/testing/logs/cleanup_logs/msf4-loot-$(date '+%Y_%m_%d_%H_%M_%S')

}



# Download Tools to root Dir
# download_tools - my_functions
download-tools() {

# [[ ! -d "${HOME}/tools/TODO" ]] && 
[[ ! -d "${HOME}/tools" ]] && mkdir "${HOME}/tools"
[[ ! -d "${HOME}/tools/scripts" ]] && mkdir "${HOME}/tools/scripts"
# PowerShell Scripts
[[ ! -f "${HOME}/tools/scripts/Invoke-Mimikatz.ps1" ]] && wget https://github.com/clymb3r/PowerShell/blob/master/Invoke-Mimikatz/Invoke-Mimikatz.ps1 -P /root/tools/scripts

#
[[ ! -f "${HOME}/tools/Snaffler.exe" ]] && wget https://github.com/SnaffCon/Snaffler/releases/download/1.0.146/Snaffler.exe -P /root/tools
#
[[ ! -f "${HOME}/tools/hoardd-client_Linux_x86_64.tar.gz" ]] && wget https://github.com/hoardd/hoardd-client/releases/download/v0.6.0/hoardd-client_Linux_x86_64.tar.gz -P /root/tools
[[ ! -d "${HOME}/tools/hoardd-client" ]] && mkdir "${HOME}/tools/hoardd-client"
[[ ! -f "${HOME}/tools/hoardd-client/hoardd-client" ]] && tar -xvf /root/tools/hoardd-client_Linux_x86_64.tar.gz -C /root/tools/hoardd-client
#
[[ ! -f "${HOME}/tools/kerbrute_linux_amd64" ]] && wget https://github.com/ropnop/kerbrute/releases/download/v1.0.3/kerbrute_linux_amd64 -P /root/tools
[[ ! -f "${HOME}/tools/bravestarr.py" ]] && wget https://raw.githubusercontent.com/immunityinc/bravestarr/master/bravestarr.py -P /root/tools
[[ ! -f "${HOME}/tools/calculate-time.py" ]] && wget https://raw.githubusercontent.com/spyder6675/vm-setup/main/calculate-time.py -P /root/tools
# NTLMv1 wget the raw file 
[[ ! -f "${HOME}/tools/ct3_to_ntlm.c" ]] && wget https://github.com/hashcat/hashcat-utils/blob/master/src/ct3_to_ntlm.c -P /root/tools
# Download Eavesarp-ng
[[ ! -f "${HOME}/tools/eavesarp" ]] && wget https://github.com/ImpostorKeanu/eavesarp-ng/releases/download/alpha-v0.1.4-release/eavesarp -P /root/tools
# 
# VPN IKE Wordlist
[[ ! -d "${HOME}/tools/vpn-wordlists" ]] && mkdir "${HOME}/tools/vpn-wordlists"
[[ ! -f "${HOME}/tools/vpnIDs.txt" ]] && wget https://raw.githubusercontent.com/spyder6675/vm-setup/main/vpnIDs.txt -P /root/tools/vpn-wordlists


}


# Nmap Scripts
# download_nmap_scripts - my_functions
download-nmap-scripts() {

# [[ ! -f /usr/share/nmap/scripts ]] &&
#
[[ ! -f /usr/share/nmap/scripts/http-apache-server-status.nse ]] && wget https://raw.githubusercontent.com/nmap/nmap/refs/heads/master/scripts/http-apache-server-status.nse -P /usr/share/nmap/scripts
[[ ! -f /usr/share/nmap/scripts/ssh-os.nse ]] && wget https://raw.githubusercontent.com/richlamdev/ssh-default-banners/master/ssh-os.nse -P /usr/share/nmap/scripts
[[ ! -f /usr/share/nmap/scripts/http-vuln-cve2020-3452.nse ]] && wget https://raw.githubusercontent.com/RootUp/PersonalStuff/master/http-vuln-cve2020-3452.nse -P /usr/share/nmap/scripts
[[ ! -f /usr/share/nmap/scripts/oracle-tns-poison.nse ]] && wget https://raw.githubusercontent.com/bongbongco/CVE-2012-1675/refs/heads/master/oracle-tns-poison.nse -P /usr/share/nmap/scripts
[[ ! -f /usr/share/nmap/scripts/cisco-siet.nse ]] && wget https://raw.githubusercontent.com/frostbits-security/SIET/refs/heads/master/cisco-siet.nse -P /usr/share/nmap/scripts
[[ ! -f /usr/share/nmap/scripts/ssh-hassh.nse ]] && wget https://raw.githubusercontent.com/0x4D31/hassh-utils/master/ssh-hassh.nse -P /usr/share/nmap/scripts
#
[[ ! -f /usr/share/nmap/scripts/cisco-wcl.nse ]] && wget https://raw.githubusercontent.com/spyder6675/vm-setup/main/cisco-wcl.nse -P /usr/share/nmap/scripts
[[ ! -f /usr/share/nmap/scripts/dell-idrac.nse ]] && wget https://raw.githubusercontent.com/spyder6675/vm-setup/main/dell-idrac.nse -P /usr/share/nmap/scripts

#
nmap --script-updatedb

}


### Unzip Rockyou ###
# rockyou_unzip - my_functions
rockyou-unzip() {

[[ ! -d /usr/share/wordlists/rockyou.txt ]] && gzip -d /usr/share/wordlists/rockyou.txt.gz

}



#
### End of Functions ### 
#
## END SCRIPT ##
